{"version":3,"file":"static/js/733.780eac07.chunk.js","mappings":"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","sources":["config/contracts.js","connections/contracts.js"],"sourcesContent":["export const NALNDA_TOKEN_CONTRACT_ADDRESS = '0xfEc014B41506430F055ceff9A007e690D409b304'\nexport const MARKET_CONTRACT_ADDRESS = \"0x3A76D87F7Fb591Bf0D784A31043152C1f9E8B54D\"\nexport const DISCOUNT_CONTRACT_ADDRESS = \"0x414d73A980d5503ac9E89DFC01Ea310f2a720E64\"","\nimport GaTracker from '../trackers/ga-tracker'\n\nimport { NALNDA_TOKEN_CONTRACT_ADDRESS, MARKET_CONTRACT_ADDRESS } from \"../config/contracts\"\n\nconst { ethers } = require('ethers')\n\nconst marketplace = require('../artifacts/contracts/NalndaMarketplace.sol/NalndaMarketplace.json')\nconst nalndaToken = require('../artifacts/contracts/mocks/NALNDA.sol/Nalnda.json')\nconst book = require('../artifacts/contracts/NalndaBook.sol/NalndaBook.json')\n\nconst getBooksCount = async function getBooksCount(){\n\tGaTracker('event_contracts_get_books_count')\n\tconst provider = new ethers.providers.Web3Provider(window.ethereum)\n\tlet marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, provider)\n\tconst books = await marketplaceContract.totalBooksCreated()\n\treturn books.toString()\n}\n\nconst getBooks = async function getBooks (index){\n\tGaTracker('event_contracts_get_books')\n\tconst provider = new ethers.providers.Web3Provider(window.ethereum)\n\tlet marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, provider)\n\tconst books = await marketplaceContract.bookAddresses(index)\n\treturn books\n}\n\n// todo check 90 < daysForSecondarySale < 150\n// todo 1 <= language <= 100\n// todo 1 <= genre <= 60\nconst listNftForSales = async function listNftForSales(authorAddress, coverUrl, price, daysForSecondarySale, language, genres, signer){\n\tGaTracker('event_contracts_list_nft')\n\tlet marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tlet transaction = await marketplaceContract.createNewBook(authorAddress, coverUrl, ethers.utils.parseEther(price), daysForSecondarySale, language, genres)\n\tlet tx = await transaction.wait()\n\treturn tx\n}\n\nconst purchaseNft = async function purchaseNft(buyer, bookAddress, amount, signer){\n\tGaTracker('event_contracts_purchase_nft')\n\tconst nalndaTokenContract = new ethers.Contract(NALNDA_TOKEN_CONTRACT_ADDRESS, nalndaToken.abi, signer)\n\tconst approval = await nalndaTokenContract.approve(bookAddress, ethers.utils.parseEther(amount))\n\tconst ap = await approval.wait()\n\tconst bookContract = new ethers.Contract(bookAddress, book.abi, signer)\n\tconst transaction = await bookContract.safeMint(buyer)\n\tconst tx = await transaction.wait()\n\treturn tx\n}\n\nconst getBookUri = async function getBookUri(bookAddress, signer){\n\tGaTracker('event_contracts_get_book_uri')\n\tconst bookContract = new ethers.Contract(bookAddress, book.abi, signer)\n\tconst uri = await bookContract.uri()\n\treturn uri\n}\n\nconst listBookToMarketplace = async function listBookToMarketplace(bookAddress, bookTokenId, bookPrice, signer) {\n\tGaTracker('event_contracts_list_book')\n\t// const bookContract = new ethers.Contract(bookAddress, book.abi, signer)\n\t// const approval = await bookContract.setApprovalForAll(MARKET_CONTRACT_ADDRESS, true)\n\t// const ap = await approval.wait()\n\tconst marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tconst listing = await marketplaceContract.listCover(bookAddress, bookTokenId, ethers.utils.parseEther(bookPrice))\n\treturn await listing.wait()\n}\n\nconst unlistBookFromMarketplace = async function unlistBookFromMarketplace(bookOrderId, signer) {\n\tGaTracker('event_contracts_unlist_book')\n\tconst marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tconst unlisting = await marketplaceContract.unlistCover(bookOrderId)\n\treturn await unlisting.wait()\n}\n\nconst buyListedCover = async function buyListedCover(bookOrderId, bookPrice, signer) {\n\tGaTracker('event_contracts_buy_cover')\n\tconst nalndaTokenContract = new ethers.Contract(NALNDA_TOKEN_CONTRACT_ADDRESS, nalndaToken.abi, signer)\n\tconst approval = await nalndaTokenContract.approve(MARKET_CONTRACT_ADDRESS, ethers.utils.parseEther(bookPrice.toString()))\n\tconst ap = await approval.wait()\n\tconst marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tconst transaction = await marketplaceContract.buyCover(bookOrderId)\n\tconst tx = await transaction.wait()\n\treturn tx\n}\n\nconst Contracts = {\n\tnalndaToken,\n\tmarketplace,\n\tbook,\n\tgetBooksCount,\n\tgetBooks,\n\tlistNftForSales,\n\tpurchaseNft,\n\tgetBookUri,\n\tlistBookToMarketplace,\n\tunlistBookFromMarketplace,\n\tbuyListedCover\n}\n\nexport default Contracts"],"names":["NALNDA_TOKEN_CONTRACT_ADDRESS","MARKET_CONTRACT_ADDRESS","ethers","require","marketplace","nalndaToken","book","getBooksCount","GaTracker","provider","providers","Web3Provider","window","ethereum","marketplaceContract","Contract","abi","totalBooksCreated","books","toString","getBooks","index","bookAddresses","listNftForSales","authorAddress","coverUrl","price","daysForSecondarySale","language","genres","signer","createNewBook","utils","parseEther","transaction","wait","tx","purchaseNft","buyer","bookAddress","amount","nalndaTokenContract","approve","approval","bookContract","safeMint","getBookUri","uri","listBookToMarketplace","bookTokenId","bookPrice","listCover","listing","unlistBookFromMarketplace","bookOrderId","unlistCover","unlisting","buyListedCover","buyCover"],"sourceRoot":""}