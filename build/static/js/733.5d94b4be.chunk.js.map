{"version":3,"file":"static/js/733.5d94b4be.chunk.js","mappings":"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","sources":["config/contracts.js","connections/contracts.js"],"sourcesContent":["export const NALNDA_TOKEN_CONTRACT_ADDRESS = '0xfEc014B41506430F055ceff9A007e690D409b304'\nexport const MARKET_CONTRACT_ADDRESS = \"0x3A76D87F7Fb591Bf0D784A31043152C1f9E8B54D\"\nexport const DISCOUNT_CONTRACT_ADDRESS = \"0x414d73A980d5503ac9E89DFC01Ea310f2a720E64\"","import GaTracker from '../trackers/ga-tracker'\n\nimport {\n    NALNDA_TOKEN_CONTRACT_ADDRESS,\n    MARKET_CONTRACT_ADDRESS,\n} from '../config/contracts'\n\nconst { ethers } = require('ethers')\n\nconst marketplace = require('../artifacts/contracts/NalndaMarketplace.sol/NalndaMarketplace.json')\nconst nalndaToken = require('../artifacts/contracts/mocks/NALNDA.sol/Nalnda.json')\nconst book = require('../artifacts/contracts/NalndaBook.sol/NalndaBook.json')\n\nconst getBooksCount = async function getBooksCount() {\n    GaTracker('event_contracts_get_books_count')\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    let marketplaceContract = new ethers.Contract(\n        MARKET_CONTRACT_ADDRESS,\n        marketplace.abi,\n        provider\n    )\n    const books = await marketplaceContract.totalBooksCreated()\n    return books.toString()\n}\n\nconst getBooks = async function getBooks(index) {\n    GaTracker('event_contracts_get_books')\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\n    let marketplaceContract = new ethers.Contract(\n        MARKET_CONTRACT_ADDRESS,\n        marketplace.abi,\n        provider\n    )\n    const books = await marketplaceContract.bookAddresses(index)\n    return books\n}\n\nconst listNftForSales = async function listNftForSales(\n    authorAddress,\n    coverUrl,\n    price,\n    daysForSecondarySale,\n    language,\n    genres,\n    signer\n) {\n    GaTracker('event_contracts_list_nft')\n    let marketplaceContract = new ethers.Contract(\n        MARKET_CONTRACT_ADDRESS,\n        marketplace.abi,\n        signer\n    )\n    let transaction = await marketplaceContract.createNewBook(\n        authorAddress,\n        coverUrl,\n        ethers.utils.parseEther(price),\n        daysForSecondarySale,\n        language,\n        genres\n    )\n    let tx = await transaction.wait()\n    return tx\n}\n\nconst purchaseNft = async function purchaseNft(\n    buyer,\n    bookAddress,\n    amount,\n    signer\n) {\n    GaTracker('event_contracts_purchase_nft')\n    const nalndaTokenContract = new ethers.Contract(\n        NALNDA_TOKEN_CONTRACT_ADDRESS,\n        nalndaToken.abi,\n        signer\n    )\n    const approval = await nalndaTokenContract.approve(\n        bookAddress,\n        ethers.utils.parseEther(amount)\n    )\n    await approval.wait()\n    const bookContract = new ethers.Contract(bookAddress, book.abi, signer)\n    const transaction = await bookContract.safeMint(buyer)\n    const tx = await transaction.wait()\n    return tx\n}\n\nconst getBookUri = async function getBookUri(bookAddress, signer) {\n    GaTracker('event_contracts_get_book_uri')\n    const bookContract = new ethers.Contract(bookAddress, book.abi, signer)\n    const uri = await bookContract.uri()\n    return uri\n}\n\nconst listBookToMarketplace = async function listBookToMarketplace(\n    bookAddress,\n    bookTokenId,\n    bookPrice,\n    signer\n) {\n    GaTracker('event_contracts_list_book')\n    const marketplaceContract = new ethers.Contract(\n        MARKET_CONTRACT_ADDRESS,\n        marketplace.abi,\n        signer\n    )\n    const listing = await marketplaceContract.listCover(\n        bookAddress,\n        bookTokenId,\n        ethers.utils.parseEther(bookPrice)\n    )\n    return await listing.wait()\n}\n\nconst unlistBookFromMarketplace = async function unlistBookFromMarketplace(\n    bookOrderId,\n    signer\n) {\n    GaTracker('event_contracts_unlist_book')\n    const marketplaceContract = new ethers.Contract(\n        MARKET_CONTRACT_ADDRESS,\n        marketplace.abi,\n        signer\n    )\n    const unlisting = await marketplaceContract.unlistCover(bookOrderId)\n    return await unlisting.wait()\n}\n\nconst buyListedCover = async function buyListedCover(\n    bookOrderId,\n    bookPrice,\n    signer\n) {\n    GaTracker('event_contracts_buy_cover')\n    const nalndaTokenContract = new ethers.Contract(\n        NALNDA_TOKEN_CONTRACT_ADDRESS,\n        nalndaToken.abi,\n        signer\n    )\n    const approval = await nalndaTokenContract.approve(\n        MARKET_CONTRACT_ADDRESS,\n        ethers.utils.parseEther(bookPrice.toString())\n    )\n    await approval.wait()\n    const marketplaceContract = new ethers.Contract(\n        MARKET_CONTRACT_ADDRESS,\n        marketplace.abi,\n        signer\n    )\n    const transaction = await marketplaceContract.buyCover(bookOrderId)\n    const tx = await transaction.wait()\n    return tx\n}\n\nconst createNewItoBook = async function createNewBook(\n    authorAddress,\n    idos,\n    coverUrl,\n    price,\n    daysForSecondarySale,\n    language,\n    genres,\n    signer\n) {\n    GaTracker('event_contracts_create_ito')\n}\n\nconst Contracts = {\n    nalndaToken,\n    marketplace,\n    book,\n    getBooksCount,\n    getBooks,\n    listNftForSales,\n    purchaseNft,\n    getBookUri,\n    listBookToMarketplace,\n    unlistBookFromMarketplace,\n    buyListedCover,\n    createNewItoBook,\n}\n\nexport default Contracts\n"],"names":["NALNDA_TOKEN_CONTRACT_ADDRESS","MARKET_CONTRACT_ADDRESS","ethers","require","marketplace","nalndaToken","book","getBooksCount","GaTracker","provider","providers","Web3Provider","window","ethereum","marketplaceContract","Contract","abi","totalBooksCreated","books","toString","getBooks","index","bookAddresses","listNftForSales","authorAddress","coverUrl","price","daysForSecondarySale","language","genres","signer","createNewBook","utils","parseEther","transaction","wait","tx","purchaseNft","buyer","bookAddress","amount","nalndaTokenContract","approve","approval","bookContract","safeMint","getBookUri","uri","listBookToMarketplace","bookTokenId","bookPrice","listCover","listing","unlistBookFromMarketplace","bookOrderId","unlistCover","unlisting","buyListedCover","buyCover","createNewItoBook","idos"],"sourceRoot":""}