{"version":3,"file":"static/js/148.3349fc49.chunk.js","mappings":"6zFACaA,EAAc,S,iLCIvBC,EAAU,KAEd,IAEI,GAAU,OADVA,EAAMC,WACY,MAAM,IAAIC,MAAM,gBAQrC,CAPC,MAAOC,IACL,IAAMC,EAAS,IAAIC,EAAAA,OAAOC,EAAAA,GAC1BN,EAAK,WACDI,EAAOG,WAAW,+CAAgDF,EAAAA,OAAAA,OAAAA,sBAAqC,CACnGG,UAAW,mBAElB,CACJ,C,0SCLKJ,EAAS,IAAIC,EAAAA,OAAOC,EAAAA,GAiBtBG,EAAS,EA0BAC,EAAb,0CAaI,WAAYC,EAA6BC,GAAoB,wBAGzC,QAAZA,GACAR,EAAOG,WAAW,uDAAwDF,EAAAA,OAAAA,OAAAA,sBAAqC,CAC3GG,UAAW,iBAKf,EADgB,kBAATG,EACP,YAAMA,EAAKC,GAEX,YAAM,aAAcA,IAGnBC,kBAAoB,EAEzB,EAAKC,UAAW,EAEI,kBAATH,GACPI,EAAAA,EAAAA,iBAAe,UAAM,aAAc,IAAId,EAAU,EAAKe,WAAWL,OAEjEI,EAAAA,EAAAA,iBAAe,UAAM,aAAcJ,IAGvCI,EAAAA,EAAAA,iBAAe,UAAM,YAAa,CAAC,IACnCA,EAAAA,EAAAA,iBAAe,UAAM,QAAS,CAAC,IAC/BA,EAAAA,EAAAA,iBAAe,UAAM,UAAW,CAAC,IACjCA,EAAAA,EAAAA,iBAAe,UAAM,kBAAP,uEAGd,EAAKE,UAAUC,OAAS,WACpB,EAAKJ,UAAW,EAChBK,OAAOC,KAAK,EAAKC,WAAWC,SAAQ,SAACC,GACjC,EAAKN,UAAUO,KAAK,EAAKH,UAAUE,GAAIE,QAC1C,GACJ,EAED,EAAKR,UAAUS,UAAY,SAACC,GACxB,IAAMC,EAAOD,EAAaC,KACpBC,EAASC,KAAKC,MAAMH,GAC1B,GAAiB,MAAbC,EAAON,GAAY,CACnB,IAAMA,EAAKS,OAAOH,EAAON,IACnBU,EAAU,EAAKZ,UAAUE,GAG/B,UAFO,EAAKF,UAAUE,QAEAW,IAAlBL,EAAOA,OACPI,EAAQE,SAAS,KAAMN,EAAOA,QAE9B,EAAKO,KAAK,QAAS,CACfC,OAAQ,WACRJ,QAASH,KAAKC,MAAME,EAAQR,SAC5Ba,SAAUT,EAAOA,OACjBU,UAAU,gBAGX,CACH,IAAIpC,EAAe,KACf0B,EAAO1B,OACPA,EAAQ,IAAID,MAAM2B,EAAO1B,MAAMqC,SAAW,kBAC1CzB,EAAAA,EAAAA,gBAAoBZ,EAAO,OAAQ0B,EAAO1B,MAAMsC,MAAQ,OACxD1B,EAAAA,EAAAA,gBAAoBZ,EAAO,WAAYyB,IAEvCzB,EAAQ,IAAID,MAAM,iBAGtB+B,EAAQE,SAAShC,OAAO+B,GAExB,EAAKE,KAAK,QAAS,CACfC,OAAQ,WACRlC,MAAOA,EACP8B,QAASH,KAAKC,MAAME,EAAQR,SAC5Bc,UAAU,WAGjB,CAEJ,MAAM,GAAsB,qBAAlBV,EAAOa,OAA+B,CAE7C,IAAMC,EAAM,EAAKC,MAAMf,EAAOgB,OAAOC,cACjCH,GAEAA,EAAII,YAAYlB,EAAOgB,OAAOhB,OAGrC,MACGmB,QAAQC,KAAK,yBAEpB,EAKD,IAAMC,EAAWC,aAAY,WACzB,EAAKf,KAAK,OACb,GAAE,KA/FsD,OAgGrDc,EAASE,OAASF,EAASE,SAhG0B,SAiG5D,CA9GL,sCAkHI,WAAiC,OAAOC,KAAKC,UAAa,GAlH9D,2BAoHI,WACI,OAAOD,KAAKE,cACf,GAtHL,2BAwHI,WACI,OAAO,CACV,EA1HL,IAkII,SAAoBC,GAChBpD,EAAOG,WAAW,mDAAoDF,EAAAA,OAAAA,OAAAA,sBAAqC,CACvGG,UAAW,sBAElB,GAtIL,8BA4HI,SAAiBiD,GACbrD,EAAOG,WAAW,iDAAkDF,EAAAA,OAAAA,OAAAA,sBAAqC,CACrGG,UAAW,mBAElB,GAhIL,kBAwIU,W,6IACK,M,0CACV,GA1IL,mBA4II,SAAYgD,GACHA,GAELpD,EAAOG,WAAW,0CAA2CF,EAAAA,OAAAA,OAAAA,sBAAqC,CAC9FG,UAAW,cAElB,GAlJL,kBAoJI,SAAKkC,EAAgBG,GAAmB,WAC9Ba,EAAMjD,IAEZ,OAAO,IAAIkD,SAAQ,SAACC,EAASC,GAMzB,IAAMpC,EAAUK,KAAKgC,UAAU,CAC3BpB,OAAQA,EACRG,OAAQA,EACRtB,GAAImC,EACJK,QAAS,QAGb,EAAK3B,KAAK,QAAS,CACfC,OAAQ,UACRJ,QAASH,KAAKC,MAAMN,GACpBc,SAAU,IAGd,EAAKlB,UAAUW,OAAO0B,IAAQ,CAAEvB,SAlBhC,SAAkBhC,EAAc0B,GAC5B,OAAI1B,EAAgB0D,EAAO1D,GACpByD,EAAQ/B,EAClB,EAeyCJ,QAAAA,GAEtC,EAAKX,UAAY,EAAKG,UAAUO,KAAKC,EAC5C,GACJ,GA9KL,wBAoLU,SAAWuC,EAAaC,EAAmBlB,G,mIAQ/B,OANM,OADhBmB,EAAeb,KAAKc,QAAQH,MAE5BE,EAAeP,QAAQS,IAAIH,GAAOI,MAAK,SAACJ,GACpC,OAAO,EAAKzC,KAAK,gBAAiByC,EACrC,IACDZ,KAAKc,QAAQH,GAAOE,G,SAEJA,E,OAAdI,EAAAA,EAAAA,KACNjB,KAAKT,MAAM0B,GAAS,CAAEN,IAAAA,EAAKjB,YAAAA,G,+CAC9B,GA9LL,yBAgMI,SAAYwB,GAAY,WACpB,OAAQA,EAAMC,MACV,IAAK,QACDnB,KAAKoB,WAAW,QAAS,CAAE,aAAc,SAAC5C,GACtC,IAAM4B,EAAciB,EAAAA,GAAAA,KAAe7C,EAAO8C,QAAQC,WAClD,EAAKC,SAASC,MAAQrB,EACtB,EAAKrB,KAAK,QAASqB,EACtB,IACD,MAEJ,IAAK,UACDJ,KAAKoB,WAAW,UAAW,CAAE,2BAA4B,SAAC5C,GACtD,EAAKO,KAAK,UAAWP,EACxB,IACD,MAEJ,IAAK,SACDwB,KAAKoB,WAAWF,EAAMP,IAAK,CAAE,OAAQX,KAAK0B,WAAWR,EAAMS,UAAW,SAACnD,GAC7C,MAAlBA,EAAOoD,UAAmBpD,EAAOoD,SAAU,GAC/C,EAAK7C,KAAKmC,EAAMS,OAAQ,EAAKE,UAAUC,UAAUtD,GACpD,IACD,MAEJ,IAAK,KACD,IAAMuD,EAAc,SAACb,GACjB,IAAMc,EAAOd,EAAMc,KACnB,EAAKC,sBAAsBD,GAAMhB,MAAK,SAACkB,GAC9BA,GACL,EAAKnD,KAAKiD,EAAME,EACnB,GACJ,EAGDH,EAAYb,GAMZlB,KAAKoB,WAAW,KAAM,CAAE,aAAc,SAAC5C,GACnC,EAAK2D,QAAQR,QAAO,SAACS,GAAD,MAAmB,OAAXA,EAAEjB,IAAV,IAA0BlD,QAAQ8D,EACzD,IACD,MAIJ,IAAK,QACL,IAAK,OACL,IAAK,WACL,IAAK,UACL,IAAK,QACD,MAEJ,QACIpC,QAAQ0C,IAAI,aAAcnB,GAGrC,GAzPL,wBA2PI,SAAWA,GAAY,WACfP,EAAMO,EAAMP,IAEhB,GAAmB,OAAfO,EAAMC,KAAe,CAErB,GAAInB,KAAKmC,QAAQR,QAAO,SAACS,GAAD,MAAmB,OAAXA,EAAEjB,IAAV,IAA0BmB,OAC9C,OAEJ3B,EAAM,IACT,MAAM,GAAIX,KAAKuC,cAAcrB,EAAMA,OAEhC,OAGJ,IAAMD,EAAQjB,KAAKc,QAAQH,GACtBM,WAECjB,KAAKc,QAAQH,GACpBM,EAAMD,MAAK,SAACC,GACF,EAAK1B,MAAM0B,YACT,EAAK1B,MAAM0B,GAClB,EAAK9C,KAAK,kBAAmB,CAAE8C,IAClC,IACJ,GAlRL,qBAoRU,W,kIAEEjB,KAAKpC,UAAU4E,aAAe5F,EAAAA,WAAoB6F,C,eAClD,O,SAAO,IAAInC,SAAQ,SAACC,GAChB,EAAK3C,UAAUC,OAAS,WACpB0C,GAAQ,EACX,EAED,EAAK3C,UAAU8E,QAAU,WACrBnC,GAAQ,EACX,CACJ,I,OAKLP,KAAKpC,UAAU+E,MAAM,K,+CACxB,IArSL,yBAgLI,WACI,MAAO,qBACV,KAlLL,GAAuCC,EAAAA,G,sSC9CjC7F,EAAS,IAAIC,EAAAA,OAAOC,EAAAA,GAkBb4F,EAAb,iJACU,WAAa,W,2OAEA,OADXtF,EAAUyC,KAAKzC,SACJ,C,eACD,O,SAAMuF,EAAMC,cAAaC,KAAA,M,QAAnCzF,EAAAA,EAAAA,OAGIR,EAAOG,WAAW,sBAAuBF,EAAAA,OAAAA,OAAAA,cAA6B,CAAC,GAItD,MAAjBgD,KAAKiD,YAELvF,EAAAA,EAAAA,gBAAesC,KAAM,WAAYzC,GAEjCyC,KAAKjB,KAAK,UAAWxB,EAAS,O,gCAG/BA,G,+CACV,KAnBL,GAA2CqF,EAAAA,GAsBrBM,EAAtB,0CAGI,WAAY3F,EAAsB4F,GAAY,sBAC1CpG,EAAOqG,cAAP,0CAAiCF,GAGjC3F,GAAU8F,EAAAA,EAAAA,WAAS,0CAA+C,aAAxDA,CAAsE9F,GAChF4F,GAASE,EAAAA,EAAAA,WAAS,0CAAyC,YAAlDA,CAA+DF,GAExE,IAAMxF,GAAa0F,EAAAA,EAAAA,WAAS,0CAAyB,SAAlCA,CAA4C9F,EAAS4F,GAP9B,OAS1C,cAAMxF,EAAYJ,GAEK,kBAAZ4F,GACPzF,EAAAA,EAAAA,iBAAe,UAAM,SAAUyF,GACd,MAAVA,GACPrF,OAAOC,KAAKoF,GAAQlF,SAAQ,SAACqF,IACzB5F,EAAAA,EAAAA,iBAAc,UAAiB4F,EAAKH,EAAOG,GAC9C,IAhBqC,CAkB7C,CArBL,4CAuBI,WACIvG,EAAO6C,KAAK,yDACf,GAzBL,iCA2BI,WACI,OAAO,CACV,GA7BL,uBA+BI,SAAU2D,GACN,OAAOxG,EAAOG,WACV,wCACAF,EAAAA,OAAAA,OAAAA,sBACA,CAAEG,UAAW,aAEpB,GArCL,0BAuCI,WACI,OAAOmD,QAAQC,QAAQ,GAC1B,IAzCL,wBA4CI,SAAiB4C,GACb,OAAOA,CACV,GA9CL,oBAmDI,SAAc5F,EAAkB4F,GAC5B,OAAOpG,EAAOG,WAAW,oDAAqDF,EAAAA,OAAAA,OAAAA,gBAA+B,CACzGG,UAAW,UAElB,KAvDL,GAAiD0F,GCtC3C9F,EAAS,IAAIC,EAAAA,OAAOC,EAAAA,GASpBuG,EAAgB,mCAETC,EAAb,0CAGI,WAAYlG,EAAsB4F,GAAY,sBAC1C,IAAMjE,EAAW,IAAIwE,EAAgBnG,EAAS4F,GAExC7F,EAAM4B,EAASvB,WAAWL,IAAIqG,QAAQ,SAAU,MAClBA,QAAQ,eAAgB,mBAJlB,OAM1C,cAAMrG,EAAK4B,EAAS3B,UACpBG,EAAAA,EAAAA,iBAAe,UAAM,SAAUwB,EAASiE,QAPE,CAQ7C,CAXL,kDAaI,WACI,OAAQnD,KAAKmD,SAAWK,CAC3B,KAfL,GAA8CnG,GAkBjCqG,EAAb,uJAkEI,WACI,OAAQ1D,KAAKmD,SAAWK,CAC3B,IApEL,mCAEI,SAA4BjG,EAAsB4F,GAC9C,OAAO,IAAIM,EAAyBlG,EAAS4F,EAChD,GAJL,uBAMI,SAAiBA,GACb,OAAc,MAAVA,EAAyBK,GACzBL,GAA6B,kBAAZA,GACjBpG,EAAO6G,mBAAmB,iBAAkB,SAAUT,GAEnDA,EACV,GAZL,oBAcI,SAAc5F,EAAkB4F,GAC5B,IAAIU,EAAO,KACX,OAAQtG,EAAQuG,MACZ,IAAK,YACDD,EAAO,gCACP,MACJ,IAAK,UACDA,EAAO,gCACP,MACJ,IAAK,UACDA,EAAO,gCACP,MACJ,IAAK,SACDA,EAAO,+BACP,MACJ,IAAK,QACDA,EAAO,8BACP,MACJ,IAAK,QACDA,EAAO,oCACP,MACJ,IAAK,WACDA,EAAO,mCACP,MACJ,IAAK,WACDA,EAAO,gCACP,MACJ,IAAK,mBACDA,EAAO,gCACP,MACJ,IAAK,WACDA,EAAO,gCACP,MACJ,IAAK,iBACDA,EAAO,8BACP,MACJ,QACG9G,EAAO6G,mBAAmB,sBAAuB,UAAWG,UAAU,IAG7E,MAAO,CACHC,WAAW,EACX1G,IAAM,WAAkBuG,EAAOV,EAC/Bc,iBAAkB,SAACC,EAAiB5G,GAIhC,OAHI6F,IAAWK,IACXW,EAAAA,EAAAA,MAEG7D,QAAQC,SAAQ,EAC1B,EAER,KAhEL,GAAqC2C,GC9B/BnG,EAAS,IAAIC,EAAAA,OAAOC,EAAAA,GAGpBuG,EAAgB,mEAEtB,SAASY,EAAQN,GACb,OAAQA,GACJ,IAAK,YACD,MAAO,oBACX,IAAK,UACD,MAAO,4BACX,IAAK,UACD,MAAO,4BACX,IAAK,SACD,MAAO,2BAEX,IAAK,QACD,MAAO,wBAEX,IAAK,WACD,MAAO,yBAEf,OAAO/G,EAAO6G,mBAAmB,sBAAuB,OAAQE,EACnE,CAEM,IAAMO,EAAb,uJAGI,WACI,OAAQrE,KAAKmD,SAAWK,CAC3B,IALL,wBAOI,SAAiBL,GACb,OAAc,MAAVA,EAAyBK,EACtBL,CACV,GAVL,oBAYI,SAAc5F,EAAkB4F,GACd,MAAVA,IAAkBA,EAASK,GAC/B,IAAM7F,EAA6B,CAC/BqG,WAAW,EACX1G,IAAM,WAAc8G,EAAQ7G,EAAQuG,MAAQX,EAC5Cc,iBAAkB,SAACC,EAAiB5G,GAIhC,OAHI6F,EAAOA,SAAWK,IAClBW,EAAAA,EAAAA,MAEG7D,QAAQC,SAAQ,EAC1B,GAQL,OAL4B,MAAxB4C,EAAOmB,gBACP3G,EAAW4G,KAAO,GAClB5G,EAAW6G,SAAWrB,EAAOmB,eAG1B3G,CACV,KA/BL,GAAkCuF,G,sSC5B5BnG,EAAS,IAAIC,EAAAA,OAAOC,EAAAA,GAEbwH,EAAb,2IAsBU,SAAQpF,EAAgBG,GAAW,W,+NAGtB,mBAAXH,EAAW,C,eACG,O,SAAMyD,EAAM4B,QAAO1B,KAAA,KAAC,WAAY,CAAE2B,SAAU,W,cAApDlD,EAAAA,EAAAA,K,kBACCA,EAAMH,Q,gCAGVwB,EAAM4B,QAAO1B,KAAA,KAAC3D,EAAQG,I,+CAChC,IA/BL,wBAEI,SAAiB2D,GAIb,OAHc,MAAVA,GACApG,EAAO6G,mBAAmB,sCAAuC,SAAUT,GAExE,IACV,GAPL,oBASI,SAAc5F,EAAkB4F,GAC5B,IAAIU,EAAO,KACX,GACS,cADDtG,EAAQuG,KAERD,EAAO,mCAGR9G,EAAO6G,mBAAmB,sBAAuB,UAAWG,UAAU,IAG7E,OAAOF,CACV,KApBL,GAAwCX,G,wUCIlCnG,GAAS,IAAIC,EAAAA,OAAOC,EAAAA,GAM1B,SAAS2H,GAAuBC,GAC5B,IAAMrG,EAAiC,CAAC,EACxC,IAAK,IAAI8E,KAAOuB,EACZ,GAA+B,MAArBA,EAAavB,GAAvB,CACA,IAAInD,EAAc0E,EAAavB,GACnB,SAARA,GAA4B,IAAVnD,IAMlBA,EAHM,CAAEgB,MAAM,EAAM2D,UAAU,EAAMC,UAAU,EAAMC,aAAa,EAAMC,sBAAsB,EAAMC,OAAO,EAAM/E,OAAO,GAAQmD,IACvH6B,EAAAA,GAAAA,WAASC,EAAAA,GAAAA,SAAQjF,IACV,eAARmD,EACC,KAAM+B,EAAAA,GAAAA,eAAclF,GAAOmF,KAAI,SAACC,GACpC,0BAAqBA,EAAIhC,QAAzB,2BAAqDgC,EAAIC,YAAYC,KAAK,OAA1E,MACH,IAAEA,KAAK,KAAO,KAEPL,EAAAA,GAAAA,SAAQjF,GAEpB3B,EAAO8E,GAAOnD,EAdoC,CAgBtD,OAAO3B,CACV,CAED,SAASkH,GAAUlH,GAEf,GAAqB,GAAjBA,EAAOmH,SAAmC,qBAAnBnH,EAAOW,SAAqD,0BAAnBX,EAAOW,SACvE,OAAOX,EAAOA,OAGlB,GAAqB,GAAjBA,EAAOmH,QAAiC,MAAlBnH,EAAOW,QAAiB,CAC9C,IAAMrC,EAAa,IAAID,MAAM,oBAK7B,MAJAC,EAAM0B,OAASC,KAAKgC,UAAUjC,IACzBA,EAAOA,QAAU,IAAIoH,cAAcC,QAAQ,eAAiB,IAC7D/I,EAAMgJ,eAAgB,GAEpBhJ,CACT,CAED,OAAO0B,EAAOA,MACjB,CAED,SAASuH,GAAcvH,GAEnB,GAAIA,GAAkC,GAAlBA,EAAQmH,QAAwC,SAAnBnH,EAAQW,UAAuBX,EAAOA,QAAU,IAAIoH,cAAcC,QAAQ,eAAiB,EAAG,CAC3I,IAAM/I,EAAa,IAAID,MAAM,sBAG7B,MAFAC,EAAM0B,OAASC,KAAKgC,UAAUjC,GAC9B1B,EAAMgJ,eAAgB,EAChBhJ,CACT,CAED,GAAsB,OAAlB0B,EAAOkC,QAAkB,CAEzB,IAAM5D,EAAa,IAAID,MAAM,oBAE7B,MADAC,EAAM0B,OAASC,KAAKgC,UAAUjC,GACxB1B,CACT,CAED,GAAI0B,EAAO1B,MAAO,CAEd,IAAMA,EAAa,IAAID,MAAM2B,EAAO1B,MAAMqC,SAAW,iBAGrD,MAFIX,EAAO1B,MAAMsC,OAAQtC,EAAMsC,KAAOZ,EAAO1B,MAAMsC,MAC/CZ,EAAO1B,MAAMyB,OAAQzB,EAAMyB,KAAOC,EAAO1B,MAAMyB,MAC7CzB,CACT,CAED,OAAO0B,EAAOA,MACjB,CAGD,SAASwH,GAAYrB,GACjB,GAAiB,YAAbA,EAA0B,MAAM,IAAI9H,MAAM,yBAC9C,MAAiB,WAAb8H,EAAgCA,EAE7BsB,SAAStB,EAASuB,UAAU,GAAI,GAC1C,CAGD,IAAM1C,GAAgB,qCAEtB,SAAS2C,GAAW9G,EAAgBvC,EAAY+H,GAG5C,GAAe,SAAXxF,GAAqBvC,EAAMsC,OAASpC,EAAAA,OAAAA,OAAAA,aAA4B,CAChE,IAAMoF,EAAItF,EAAMA,MAGhB,GAAIsF,IAAMA,EAAEjD,QAAQiH,MAAM,cAAgBhE,EAAEjD,QAAQiH,MAAM,wBAAyB,CAE/E,IAAI7H,EAAO6D,EAAE7D,KAGb,GAFIA,IAAQA,EAAO,KAAOA,EAAKoF,QAAQ,SAAU,MAE7C0C,EAAAA,GAAAA,aAAY9H,GAAS,OAAOA,EAEhCxB,GAAOG,WAAW,wCAAyCF,EAAAA,OAAAA,OAAAA,eAA8B,CACrFF,MAAAA,EAAOyB,KAAM,MAEpB,CACJ,CAGD,IAAIY,EAAUrC,EAAMqC,QAuCpB,MAtCIrC,EAAMsC,OAASpC,EAAAA,OAAAA,OAAAA,eACXF,EAAMA,OAAyC,kBAAzBA,EAAMA,MAAMqC,QAClCA,EAAUrC,EAAMA,MAAMqC,QACQ,kBAAhBrC,EAAMwJ,KACpBnH,EAAUrC,EAAMwJ,KACsB,kBAAxBxJ,EAAMyJ,eACpBpH,EAAUrC,EAAMyJ,gBAGxBpH,GAAWA,GAAW,IAAIyG,eAGdQ,MAAM,uBACdrJ,GAAOG,WAAW,oDAAqDF,EAAAA,OAAAA,OAAAA,mBAAkC,CACtGF,MAAAA,EAAOuC,OAAAA,EAAQwF,YAAAA,IAKlB1F,EAAQiH,MAAM,8EACdrJ,GAAOG,WAAW,8BAA+BF,EAAAA,OAAAA,OAAAA,cAA6B,CAC3EF,MAAAA,EAAOuC,OAAAA,EAAQwF,YAAAA,IAKlB1F,EAAQiH,MAAM,wCACbrJ,GAAOG,WAAW,0BAA2BF,EAAAA,OAAAA,OAAAA,wBAAuC,CACjFF,MAAAA,EAAOuC,OAAAA,EAAQwF,YAAAA,IAInB1F,EAAQiH,MAAM,4DACdrJ,GAAOG,WAAW,4EAA6EF,EAAAA,OAAAA,OAAAA,wBAAuC,CAClIF,MAAAA,EAAOuC,OAAAA,EAAQwF,YAAAA,IAIjB/H,CACT,CAEM,IAAM0J,GAAb,0CAII,WAAYjJ,EAAsB4F,GAAe,4BAC7C,cAAM5F,IAENG,EAAAA,EAAAA,iBAAe,UAAM,UAAW,EAAK+I,eACrC/I,EAAAA,EAAAA,iBAAe,UAAM,SAAUyF,GAAUK,IAJI,CAKhD,CATL,yCAWI,WACI,OAAOxD,KAAKzC,QAAUyC,KAAKzC,QAAQuG,KAAM,WACrC,IAAK,YACD,MAAO,2BACX,IAAK,UACD,MAAO,mCACX,IAAK,UACD,MAAO,mCACX,IAAK,QACD,MAAO,iCACX,IAAK,SACD,MAAO,kCACX,IAAK,WACD,MAAO,sCAIf,OAAO/G,GAAO6G,mBAAmB,sBAAuB,UAAW5D,KAAKzC,QAAQuG,KACnF,GA7BL,oBA+BI,SAAO4C,EAAgBlH,GACnB,IAAMmH,EAAQ7I,OAAOC,KAAKyB,GAAQoH,QAAO,SAACC,EAAOvD,GAC7C,IAAMnD,EAAQX,EAAO8D,GAIrB,OAHa,MAATnD,IACA0G,GAAS,IAAJ,OAASvD,EAAT,YAAkBnD,IAEpB0G,CACV,GAAE,IACG1D,EAAWnD,KAAKmD,OAAN,kBAA4BnD,KAAKmD,QAAW,GAC5D,gBAAWnD,KAAK8G,QAAhB,uBAAwCJ,GAAxC,OAAmDC,GAAnD,OAA6DxD,EAChE,GAzCL,wBA2CI,WACI,gBAAWnD,KAAK8G,QAAhB,OACH,GA7CL,yBA+CI,SAAYJ,EAAgBlH,GAGxB,OAFAA,EAAOkH,OAASA,EAChBlH,EAAOuH,OAAS/G,KAAKmD,OACd3D,CACV,GAnDL,mBAqDU,SAAMkH,EAAgBlH,EAA6BwH,G,4IA8BtC,OA7BT1J,EAAO0J,EAAOhH,KAAKiH,aAAcjH,KAAKkH,OAAOR,EAAQlH,GACrDpB,EAAW4I,EAAOhH,KAAKmH,YAAYT,EAAQlH,GAAS,KACpD4H,EAAuB,UAAXV,EAAsBX,GAAeL,GAEvD1F,KAAKjB,KAAK,QAAS,CACfC,OAAQ,UACRJ,QAAStB,EACT4B,SAAUc,OAGRrC,EAA6B,CAC/BL,IAAKA,EACL+J,qBAAsB,IACtBpD,iBAAkB,SAACC,EAAiB5G,GAIhC,OAHI,EAAKgK,wBACLnD,EAAAA,EAAAA,MAEG7D,QAAQC,SAAQ,EAC1B,GAGDgH,EAAqB,KACrBnJ,IACAT,EAAW6J,QAAU,CAAE,eAAgB,oDACvCD,EAAazJ,OAAOC,KAAKK,GAASkH,KAAI,SAAChC,GACnC,gBAAWA,EAAX,YAAoBlF,EAAQkF,GAC/B,IAAEmC,KAAK,M,UAGSgC,EAAAA,GAAAA,WAAU9J,EAAY4J,EAAYH,GAAYrB,I,cAA7DvH,EAAAA,EAAAA,KAENwB,KAAKjB,KAAK,QAAS,CACfC,OAAQ,WACRJ,QAAStB,EACT2B,UAAUyI,EAAAA,EAAAA,UAASlJ,GACnBU,SAAUc,O,kBAGPxB,G,gDACV,GA7FL,2BA+FU,W,8IACKwB,KAAKzC,S,+CACf,GAjGL,qBAmGU,SAAQ8B,EAAgBG,GAAW,W,kPAE7BH,E,OACC,mB,KAAA,EAGA,gBAHA,KAGA,EAGA,eAHA,KAGA,EAQA,wBARA,KAQA,EAOA,YAPA,KAOA,EAOA,iBAPA,KAOA,EAQA,oBARA,KAQA,EAQA,aARA,KAQA,GAUA,mBAVA,KAUA,GAMA,0BANA,KAMA,GAMA,SANA,KAMA,GAgBA,gBAhBA,KAgBA,GAYA,YAZA,KAYA,GAmDA,kBAnDA,KAmDA,M,sCAhJMW,KAAK2H,MAAM,QAAS,CAAE3I,OAAQ,qB,gCAG9BgB,KAAK2H,MAAM,QAAS,CAAE3I,OAAQ,kB,gCAI9BgB,KAAK2H,MAAM,UAAW,CACzB3I,OAAQ,UACRuE,QAAS/D,EAAO+D,QAChB5C,IAAKnB,EAAOmF,Y,gCAIT3E,KAAK2H,MAAM,QAAS,CACvB3I,OAAQ,0BACRuE,QAAS/D,EAAO+D,QAChB5C,IAAKnB,EAAOmF,Y,gCAIT3E,KAAK2H,MAAM,QAAS,CACvB3I,OAAQ,cACRuE,QAAS/D,EAAO+D,QAChB5C,IAAKnB,EAAOmF,Y,gCAIT3E,KAAK2H,MAAM,QAAS,CACvB3I,OAAQ,mBACRuE,QAAS/D,EAAO+D,QAChBqE,SAAUpI,EAAOoI,SACjBjH,IAAKnB,EAAOmF,Y,gCAIT3E,KAAK2H,MAAM,QAAS,CACvB3I,OAAQ,yBACR6I,IAAKrI,EAAOsI,oBACb,GAAMC,OAAM,SAACjL,GACZ,OAAOqJ,GAAW,kBAAmBrJ,EAAO0C,EAAOsI,kBACtD,K,YAGGtI,EAAOmF,SAAU,C,yCACV3E,KAAK2H,MAAM,QAAS,CACvB3I,OAAQ,uBACR2B,IAAKnB,EAAOmF,SACZqD,QAAUxI,EAAOyI,oBAAsB,OAAQ,W,cAGjD,IAAIpL,MAAM,yC,iCAGTmD,KAAK2H,MAAM,QAAS,CACvB3I,OAAQ,2BACRkJ,OAAQ1I,EAAO2I,mB,iCAIZnI,KAAK2H,MAAM,QAAS,CACvB3I,OAAQ,4BACRkJ,OAAQ1I,EAAO2I,mB,WAIK,WAApB3I,EAAOmF,SAAa,C,sBACd,IAAI9H,MAAM,wD,QAQT,OALLuL,EAAWxD,GAAuBpF,EAAOqF,cACtC6B,OAAS,QAClB0B,EAASpJ,OAAS,W,oBAGDgB,KAAK2H,MAAM,QAASS,GAAU,G,qGAEpCjC,GAAW,OAAD,KAAgB3G,EAAOqF,c,QAUjC,OALLuD,EAAWxD,GAAuBpF,EAAOqF,cACtC6B,OAAS,QAClB0B,EAASpJ,OAAS,kB,oBAGDgB,KAAK2H,MAAM,QAASS,GAAU,G,qGAEpCjC,GAAW,cAAD,KAAuB3G,EAAOqF,c,QAkC1B,OA7BnBwD,EAA4B,CAAErJ,OAAQ,WAExCQ,EAAOmC,OAAO2G,YACdD,EAAKC,UAAYtC,GAAYxG,EAAOmC,OAAO2G,YAG3C9I,EAAOmC,OAAO4G,UACdF,EAAKE,QAAUvC,GAAYxG,EAAOmC,OAAO4G,UAGzC/I,EAAOmC,OAAO4B,UACd8E,EAAK9E,QAAU/D,EAAOmC,OAAO4B,SAI7B/D,EAAOmC,OAAO6G,QAAUhJ,EAAOmC,OAAO6G,OAAOlG,OAAS,IAClD9C,EAAOmC,OAAO6G,OAAOlG,OAAS,GAC9BvF,GAAOG,WAAW,0BAA2BF,EAAAA,OAAAA,OAAAA,sBAAqC,CAAEwL,OAAQhJ,EAAOmC,OAAO6G,SAG1E,IAAhChJ,EAAOmC,OAAO6G,OAAOlG,SAEE,kBADjBmG,EAASjJ,EAAOmC,OAAO6G,OAAO,KACiB,KAAlBC,EAAOnG,QACtCvF,GAAOG,WAAW,2BAA4BF,EAAAA,OAAAA,OAAAA,sBAAqC,CAAEyL,OAAQA,IAEjGJ,EAAKI,OAASA,I,UAISzI,KAAK2H,MAAM,OAAQU,G,QAA5CK,EAAAA,EAAAA,KAGFC,EAAoC,CAAC,EAGhCC,EAAI,E,aAAGA,EAAIF,EAAKpG,QAAAA,C,mBAEA,OADfD,EAAMqG,EAAKE,IACTC,UAAa,C,0DACU,MAA3BF,EAAOtG,EAAIjC,aAAgB,C,gBACb,O,UAAMJ,KAAK8I,SAASzG,EAAIjC,a,SAAhCqB,EAAAA,EAAAA,QAEFkH,EAAOtG,EAAIjC,aAAeqB,EAAMO,M,QAGxCK,EAAIwG,UAAYF,EAAOtG,EAAIjC,a,QATEwI,I,iDAY1BF,G,WAImB,cAAtB1I,KAAKzC,QAAQuG,KAAS,C,yCAAsB,G,QAC7B,O,KAAZiF,W,UAAkB/I,KAAK2H,MAAM,QAAS,CAAE3I,OAAQ,a,2BAAegK,O,uGAMvElG,EAAM4B,QAAO1B,KAAA,KAAC3D,EAAQG,I,kEAChC,GAhQL,wBAsQU,SAAWyJ,EAAyCC,EAAuBC,G,oIAG/D,O,SAAMnJ,KAAKoJ,YAAYH,G,OAMtB,O,iBALiB,MAAdC,EAAsB,EAAGA,E,KACf,MAAZC,EAAoB,SAAUA,EAJxC3J,EAAAA,CACFR,OAAQ,SACRuE,QAAAA,EAAAA,GACA8F,WAAAA,EAAAA,GACAC,SAAAA,EAAAA,GACAC,KAAM,O,SAGWvJ,KAAK2H,MAAM,UAAWnI,G,cAArChB,EAAAA,EAAAA,K,kBAECA,EAAO8G,KAAI,SAACkE,GACf,CAAC,kBAAmB,MAAMvL,SAAQ,SAASqF,GACxB,IAAXkG,EAAGlG,WAAqBkG,EAAGlG,EAClC,IACiB,MAAdkG,EAAGC,SAAyC,MAAtBD,EAAGE,kBACzBF,EAAGC,QAAUD,EAAGE,iBAEpB,IAAMC,EAAO,EAAK9H,UAAU+H,oBAAoBJ,GAEhD,OADIA,EAAGK,YAAaF,EAAKG,UAAY7D,SAASuD,EAAGK,YAC1CF,CACV,K,gDACJ,GA5RL,iCA8RI,WACI,OAAQ3J,KAAKmD,SAAWK,EAC3B,KAhSL,GAAuCuG,EAAAA,I,kTCjJjChN,GAAS,IAAIC,EAAAA,OAAOC,EAAAA,GAE1B,SAAS+M,KAAQ,OAAQ,IAAIC,MAAQC,SAAY,CAIjD,SAASC,GAAcC,GAGnB,IAFA,IAAI5L,EAAS,KAEJoK,EAAI,EAAGA,EAAIwB,EAAS9H,OAAQsG,IAAK,CACtC,IAAMrL,EAAU6M,EAASxB,GAGzB,GAAe,MAAXrL,EAAmB,OAAO,KAE1BiB,EAEMA,EAAOsF,OAASvG,EAAQuG,MAAQtF,EAAO6L,UAAY9M,EAAQ8M,UAC3D7L,EAAO8L,aAAe/M,EAAQ+M,YAAqC,MAArB9L,EAAO8L,YAA4C,MAAtB/M,EAAQ+M,aAErFvN,GAAO6G,mBAAmB,oBAAqB,WAAYwG,GAG/D5L,EAASjB,CAEhB,CAED,OAAOiB,CACV,CAED,SAAS+L,GAAOC,EAAuBC,GACnCD,EAASA,EAAOE,QAAQnB,OACxB,IAAMoB,EAASC,KAAKC,MAAML,EAAOlI,OAAS,GAG1C,GAAIkI,EAAOlI,OAAS,EAChB,OAAOkI,EAAOG,GAIlB,IAAMG,EAAIN,EAAOG,EAAS,GAAII,EAAIP,EAAOG,GAEzC,OAAgB,MAAZF,GAAoBG,KAAKI,IAAIF,EAAIC,GAAKN,EAC/B,MAGHK,EAAIC,GAAK,CACpB,CAED,SAASE,GAAU9K,GACf,GAAc,OAAVA,EACA,MAAO,OACJ,GAAsB,kBAAXA,GAAyC,mBAAXA,EAC5C,OAAO1B,KAAKgC,UAAUN,GACnB,GAAsB,kBAAXA,EACd,OAAOA,EACJ,GAAIkB,EAAAA,GAAAA,YAAsBlB,GAC7B,OAAOA,EAAM+K,WACV,GAAIC,MAAMC,QAAQjL,GACrB,OAAO1B,KAAKgC,UAAUN,EAAMmF,KAAI,SAACsD,GAAD,OAAOqC,GAAUrC,EAAjB,KAC7B,GAAsB,kBAAXzI,EAAqB,CACnC,IAAMpC,EAAOD,OAAOC,KAAKoC,GAEzB,OADApC,EAAKwL,OACE,IAAMxL,EAAKuH,KAAI,SAAChC,GACnB,IAAI+H,EAAIlL,EAAMmD,GAMd,OAJI+H,EADc,oBAAPA,EACH,aAEAJ,GAAUI,GAEX5M,KAAKgC,UAAU6C,GAAO,IAAM+H,CACtC,IAAE5F,KAAK,KAAO,GAClB,CAED,MAAM,IAAI5I,MAAM,8BAAgCsD,EACnD,CAGD,IAAImL,GAAU,EA+Bd,SAASC,GAAMC,GACX,IAAIC,EAAqB,KAErBC,EAAsB,KACtBC,EAA0B,IAAIrL,SAAQ,SAACC,GACvCkL,EAAS,WACDC,IACAE,aAAaF,GACbA,EAAQ,MAEZnL,GACH,EACDmL,EAAQG,WAAWJ,EAAQD,EAC9B,IAWD,MAAO,CAAEC,OAAAA,EAAQK,WAJjB,WACI,OAAOH,CACV,EAE4BI,KAThB,SAACC,GAEV,OADAL,EAAUA,EAAQ3K,KAAKgL,EAE1B,EAOJ,CAED,IAAMC,GAAgB,CAClBjP,EAAAA,OAAAA,OAAAA,eACAA,EAAAA,OAAAA,OAAAA,mBACAA,EAAAA,OAAAA,OAAAA,cACAA,EAAAA,OAAAA,OAAAA,wBACAA,EAAAA,OAAAA,OAAAA,yBAGEkP,GAAoB,CACtB,UACA,OACA,YACA,iBACA,SACA,eAeJ,SAASC,GAAkBC,EAAuBpC,GAC9C,IAAMxL,EAAc,CAChB6N,OAAQD,EAAOC,QAYnB,OAVAvO,OAAOwO,eAAe9N,EAAQ,WAAY,CAAE+N,IAAK,kBAAMH,EAAOlN,QAAb,IAC7CkN,EAAOI,QAAShO,EAAOgO,MAAQJ,EAAOI,OACtCxC,IAAOxL,EAAOgN,SAAYxB,EAAMoC,EAAOI,OACvCJ,EAAOK,OACHL,EAAOtP,MACP0B,EAAO1B,MAAQsP,EAAOtP,MAEtB0B,EAAOA,OAAS4N,EAAO5N,QAAU,MAGlCA,CACV,CA0BD,SAASkO,GAAexN,EAA4BG,EAAgBG,GAEhE,IAAImN,EAAY1B,GAEhB,OAAQ5L,GACJ,IAAK,iBAKD,OAAO,SAASuN,GACZ,IAAMpC,EAASoC,EAAQtH,KAAI,SAACuH,GAAD,OAAOA,EAAErO,MAAT,IAGvB4B,EAAcmK,GAAOqC,EAAQtH,KAAI,SAACuH,GAAD,OAAOA,EAAErO,MAAT,IAAkB,GACvD,GAAmB,MAAf4B,EAYJ,OAVAA,EAAcwK,KAAKkC,KAAK1M,GAGpBoK,EAAO3E,QAAQzF,EAAc,IAAM,GAAKA,IAGxCA,GAAelB,EAAS6N,sBACxB7N,EAAS6N,oBAAsB3M,GAG5BlB,EAAS6N,mBACnB,EAEL,IAAK,cAID,OAAO,SAASH,GACZ,IAAMpC,EAASoC,EAAQtH,KAAI,SAACuH,GAAD,OAAOA,EAAErO,MAAT,IAE3B,OADAgM,EAAOjB,OACAiB,EAAOI,KAAKC,MAAML,EAAOlI,OAAS,GAC5C,EAEL,IAAK,gBAGD,OAAO,SAASsK,GACZ,OAAOrC,GAAOqC,EAAQtH,KAAI,SAACuH,GAAD,OAAOA,EAAErO,MAAT,IAC7B,EAGL,IAAK,aACL,IAAK,sBACL,IAAK,UACL,IAAK,eACL,IAAK,OACL,IAAK,cACL,IAAK,UACD,MAGJ,IAAK,iBACL,IAAK,wBACDmO,EAAY,SAASnD,GACjB,OAAU,MAANA,EAAqB,OAEzBA,GAAKwD,EAAAA,EAAAA,aAAYxD,IACdyD,eAAiB,EACbhC,GAAUzB,GACpB,EACD,MAGJ,IAAK,WAGGmD,EADAnN,EAAOyI,oBACK,SAASxG,GACjB,OAAa,MAATA,EAAwB,OAE5BA,GAAQuL,EAAAA,EAAAA,aAAYvL,IACdyL,aAAezL,EAAMyL,aAAa5H,KAAI,SAACkE,GAGzC,OAFAA,GAAKwD,EAAAA,EAAAA,aAAYxD,IACdyD,eAAiB,EACbzD,CACV,IACMyB,GAAUxJ,GACpB,EAEW,SAASA,GACjB,OAAa,MAATA,EAAwB,KACrBwJ,GAAUxJ,EACpB,EAEL,MAEJ,QACI,MAAM,IAAI5E,MAAM,mBAAqBwC,GAK7C,OA1HJ,SAAyBsN,EAAmCQ,GACxD,OAAO,SAASP,GAGZ,IAAMQ,EAA4D,CAAC,EACnER,EAAQ3O,SAAQ,SAAC4O,GACb,IAAM1M,EAAQwM,EAAUE,EAAErO,QACrB4O,EAAMjN,KAAUiN,EAAMjN,GAAS,CAAEkN,MAAO,EAAG7O,OAAQqO,EAAErO,SAC1D4O,EAAMjN,GAAOkN,OAChB,IAID,IADA,IAAMtP,EAAOD,OAAOC,KAAKqP,GAChBxE,EAAI,EAAGA,EAAI7K,EAAKuE,OAAQsG,IAAK,CAClC,IAAM0E,EAAQF,EAAMrP,EAAK6K,IACzB,GAAI0E,EAAMD,OAASF,EACf,OAAOG,EAAM9O,MAEpB,CAIJ,CACJ,CAmGU+O,CAAgBZ,EAAWzN,EAASiO,OAE9C,CAID,SAAeK,GAAYpB,EAAuBhM,G,gIAGjB,OAFvBlB,EAA0BkN,EAAOlN,UAEzBkB,aAAuBlB,EAASkB,aAAeA,IAAiC,IAAjBA,GAAiB,C,wCACnFlB,G,iCAGJuO,EAAAA,GAAAA,OAAK,WACR,OAAO,IAAInN,SAAQ,SAACC,EAASC,GACzBqL,YAAW,WAGP,OAAI3M,EAASkB,aAAeA,EAAsBG,EAAQrB,GAGtDkN,EAAOsB,UAAoBnN,EAAQ,MAGhCA,OAAQ1B,EAClB,GAAE,EACN,GACJ,GAAE,CAAE8O,SAAUzO,K,0CAClB,CAED,SAAe0O,GAAUxB,EAAuByB,EAA4BxO,EAAgBG,G,6HACpFN,EAAWkN,EAAOlN,S,KAEdG,E,OACC,mB,MACA,gBADA,OAGA,kBAFA,KAEA,EAKA,eALA,MAMA,wBADA,MAEA,YADA,KADA,EAOA,iBALA,KAKA,GAKA,aALA,KAKA,GAKA,SALA,MAMA,gBADA,QAMA,mBALA,MAMA,0BADA,QAGA,YAFA,KAEA,M,sCAhCMH,EAASG,M,WAENH,EAAU4O,cAAe,C,wCAClB5O,EAAU4O,iB,8CAMvBtO,EAAOmF,YAAY0B,EAAAA,GAAAA,aAAY7G,EAAOmF,UAAR,C,gBACnB,O,UAAM6I,GAAYpB,EAAQyB,G,QAArC3O,EAAAA,EAAAA,K,iCAEGA,EAASG,GAAQG,EAAO+D,QAAS/D,EAAOmF,UAAY,W,YAEvDnF,EAAOmF,YAAY0B,EAAAA,GAAAA,aAAY7G,EAAOmF,UAAR,C,gBACnB,O,UAAM6I,GAAYpB,EAAQyB,G,QAArC3O,EAAAA,EAAAA,K,iCAEGA,EAAS6O,aAAavO,EAAO+D,QAAS/D,EAAOoI,SAAUpI,EAAOmF,UAAY,W,YAE7EnF,EAAOmF,YAAY0B,EAAAA,GAAAA,aAAY7G,EAAOmF,UAAR,C,gBACnB,O,UAAM6I,GAAYpB,EAAQyB,G,QAArC3O,EAAAA,EAAAA,K,iCAEGA,EAAUM,EAAOyI,oBAAsB,2BAA4B,YAAazI,EAAOmF,UAAYnF,EAAOqJ,Y,YAG7GrJ,EAAOmF,YAAY0B,EAAAA,GAAAA,aAAY7G,EAAOmF,UAAR,C,gBACnB,O,UAAM6I,GAAYpB,EAAQyB,G,QAArC3O,EAAAA,EAAAA,K,iCAEGA,EAASG,GAAQG,EAAOqF,c,iCAGxB3F,EAASG,GAAQG,EAAO2I,kB,cAE3BxG,EAASnC,EAAOmC,QACR2G,YAAajC,EAAAA,GAAAA,aAAY1E,EAAO2G,YAAgB3G,EAAO4G,UAAWlC,EAAAA,GAAAA,aAAY1E,EAAO4G,UAAR,C,gBAC1E,O,UAAMiF,GAAYpB,EAAQyB,G,QAArC3O,EAAAA,EAAAA,K,iCAEGA,EAAS8O,QAAQrM,I,iCAIzB5E,GAAOG,WAAW,uBAAwBF,EAAAA,OAAAA,OAAAA,cAA6B,CAC1EqC,OAAQA,EACRG,OAAQA,K,2CAEf,CAEM,IAAMyO,GAAb,0CASI,WAAYC,EAAqDf,GAAe,sBACnD,IAArBe,EAAU5L,QACVvF,GAAO6G,mBAAmB,oBAAqB,YAAasK,GAGhE,IAAMC,EAAiDD,EAAU5I,KAAI,SAAC8I,EAAkBC,GACpF,GAAIC,EAAAA,GAAAA,WAAoBF,GAAmB,CACvC,IAAMG,GAAejH,EAAAA,EAAAA,IAAoB8G,GAAoB,IAAM,IAEnE,OAAOtQ,OAAO0Q,OAAO,CAAEtP,SAAUkP,EAAkB/B,OAAQ,EAAGkC,aAAAA,EAAcE,SAD3D,GAEpB,CAED,IAAMrC,GAAiCY,EAAAA,EAAAA,aAAYoB,GAE5B,MAAnBhC,EAAOqC,WAAoBrC,EAAOqC,SAAW,GACtB,MAAvBrC,EAAOmC,eACPnC,EAAOmC,cAAejH,EAAAA,EAAAA,IAAoB8G,GAAoB,IAAM,KAEnD,MAAjBhC,EAAOC,SAAkBD,EAAOC,OAAS,GAE7C,IAAMA,EAASD,EAAOC,OAKtB,OAJIA,EAAS,GAAKA,EAAS,KAAOA,EAAS,IACvCtP,GAAO6G,mBAAmB,8CAA1B,oBAAuFyK,EAAvF,YAAyGhC,GAGtGvO,OAAO0Q,OAAOpC,EACxB,IAEKsC,EAAQP,EAAgBvH,QAAO,SAACC,EAAOgG,GAAR,OAAehG,EAAQgG,EAAER,MAAzB,GAAkC,GAEzD,MAAVc,EACAA,EAASuB,EAAQ,EACVvB,EAASuB,GAChB3R,GAAO6G,mBAAmB,oDAAqD,SAAUuJ,GAI7F,IAAIwB,EAA6CxE,GAAcgE,EAAgB7I,KAAI,SAACuH,GAAD,OAAcA,EAAE3N,SAAW3B,OAA3B,KArCP,OAwCtD,MAAlBoR,IACAA,EAAiB,IAAIrO,SAAQ,SAACC,EAASC,GACnCqL,YAAW,WACP,EAAK9I,gBAAgB/B,KAAKT,EAASC,EACtC,GAAE,EACN,KAGL,cAAMmO,IAGNjR,EAAAA,EAAAA,iBAAe,UAAM,kBAAmBI,OAAO0Q,OAAOL,KACtDzQ,EAAAA,EAAAA,iBAAe,UAAM,SAAUyP,GAE/B,EAAKJ,qBAAuB,EAtDgD,CAuD/E,CAhEL,4CAkEU,W,2HACe,O,SAAMzM,QAAQS,IAAIf,KAAKmO,gBAAgB7I,KAAI,SAACuH,GAAD,OAAOA,EAAE3N,SAAS0P,YAAlB,K,cAAtDxE,EAAAA,EAAAA,K,kBACCD,GAAcC,I,+CACxB,GArEL,qBAuEU,SAAQ/K,EAAgBG,G,uJAEX,oBAAXH,EAAW,C,gBAC4B,O,SAAMiB,QAAQS,IAAIf,KAAKmO,gBAAgB7I,KAAI,SAACuH,GAC/E,OAAOA,EAAE3N,SAAS2P,gBAAgBrP,EAAOsI,mBAAmB9G,MAAK,SAACxC,GAC9D,OAAOA,EAAOwD,IACjB,IAAE,SAAClF,GACA,OAAOA,CACV,GACJ,K,OANKgS,EAAAA,EAAAA,KASGlG,EAAI,E,YAAGA,EAAIkG,EAAQxM,QAAAA,C,mBAED,kBADjB9D,EAASsQ,EAAQlG,IACA,C,wCAAmBpK,G,OAFVoK,I,6BAM9BkG,EAAQ,G,YAKgB,IAA9B9O,KAAK+M,qBAAyC,mBAAX1N,EAAW,C,gBAC9C,O,UAAMW,KAAK+O,iB,QAGTrP,EAAcgN,GAAe1M,KAAMX,EAAQG,IAI3CoN,GAAgCoC,EAAAA,GAAAA,GAAShP,KAAKmO,gBAAgB7I,IAAI0H,EAAAA,eAChEzD,MAAK,SAACuB,EAAGC,GAAJ,OAAWD,EAAE2D,SAAW1D,EAAE0D,QAA1B,IAEPZ,EAAqB7N,KAAK+M,oBAE5BnE,EAAI,EACJqG,GAAQ,E,4GASR,IAPMC,EAAKlF,KAGPmF,EAAiBvC,EAAQjL,QAAO,SAACkL,GAAD,OAAQA,EAAEuC,QAAYF,EAAKrC,EAAEL,MAASK,EAAE0B,YAAxC,IACP3H,QAAO,SAACC,EAAOgG,GAAR,OAAehG,EAAQgG,EAAER,MAAzB,GAAkC,G,aAIlE,IAAMD,EAASQ,EAAQhE,KAEjBvI,EAAMiL,KAEZc,EAAOI,MAAQxC,KACfoC,EAAOiD,QAAU9D,GAAMa,EAAOmC,cAC9BnC,EAAOiD,QAAQtD,MAAK,WAAQK,EAAOiD,QAAU,IAAO,IAEpDjD,EAAOgD,OAASxB,GAAUxB,EAAQyB,EAAoBxO,EAAQG,GAAQwB,MAAK,SAACxC,GACxE4N,EAAOK,MAAO,EACdL,EAAO5N,OAASA,EAEZ,EAAK+D,cAAc,UACnB,EAAKxD,KAAK,QAAS,CACfC,OAAQ,UACRqB,IAAKA,EACLiP,QAASnD,GAAkBC,EAAQpC,MACnCpL,QAAS,CAAES,OAAQA,EAAQG,QAAQkI,EAAAA,EAAAA,UAASlI,IAC5CN,SAAU,GAIrB,IAAE,SAACpC,GACAsP,EAAOK,MAAO,EACdL,EAAOtP,MAAQA,EAEX,EAAKyF,cAAc,UACnB,EAAKxD,KAAK,QAAS,CACfC,OAAQ,UACRqB,IAAKA,EACLiP,QAASnD,GAAkBC,EAAQpC,MACnCpL,QAAS,CAAES,OAAQA,EAAQG,QAAQkI,EAAAA,EAAAA,UAASlI,IAC5CN,SAAU,GAGrB,IAEG,EAAKqD,cAAc,UACnB,EAAKxD,KAAK,QAAS,CACfC,OAAQ,UACRqB,IAAKA,EACLiP,QAASnD,GAAkBC,EAAQ,MACnCxN,QAAS,CAAES,OAAQA,EAAQG,QAAQkI,EAAAA,EAAAA,UAASlI,IAC5CN,SAAU,IAIlBiQ,GAAkB/C,EAAOC,M,EAhDtB8C,EAAiB,EAAKhC,QAAUvE,EAAIgE,EAAQtK,QAAQ,I,GAoDrDiN,EAA+B,GACrC3C,EAAQ3O,SAAQ,SAAC4O,IACTA,EAAEJ,MAASI,EAAEuC,SACjBG,EAAQC,KAAK3C,EAAEuC,QACXvC,EAAEwC,SAAWE,EAAQC,KAAK3C,EAAEwC,QAAQvD,cAC3C,KAEGyD,EAAQjN,OAAQ,C,eAAE,O,SAAMhC,QAAQmP,KAAKF,G,aAInCT,EAAUlC,EAAQjL,QAAO,SAACkL,GAAD,OAAQA,EAAEJ,MAAmB,MAAXI,EAAE/P,KAApB,KACnBwF,QAAU,EAAK6K,QAAAA,C,wBAERtO,KADTL,EAASkB,EAAYoP,IACZjQ,C,uBAEX+N,EAAQ3O,SAAQ,SAAA4O,GACRA,EAAEwC,SAAWxC,EAAEwC,QAAQ5D,SAC3BoB,EAAEa,WAAY,CACjB,I,qBACMlP,I,WAENyQ,EAAO,C,gBAAE,O,UAAM1D,GAAM,KAAKO,a,QAC/BmD,GAAQ,E,WAINS,EAAS9C,EAAQhG,QAAO,SAACC,EAAOgG,GAClC,IAAKA,EAAEJ,MAAmB,MAAXI,EAAE/P,MAAiB,OAAO+J,EAEzC,IAAMzH,EAAcyN,EAAE/P,MAAQsC,KAM9B,OALI6M,GAAcpG,QAAQzG,IAAS,IAC1ByH,EAAMzH,KAASyH,EAAMzH,GAAQ,CAAEtC,MAAO+P,EAAE/P,MAAOuP,OAAQ,IAC5DxF,EAAMzH,GAAMiN,QAAUQ,EAAER,QAGrBxF,CACV,GAA2D,CAAC,GAE7D/I,OAAOC,KAAK2R,GAAQzR,SAAQ,SAAC0R,GACzB,IAAMvC,EAAQsC,EAAOC,GACrB,KAAIvC,EAAMf,OAAS,EAAKc,QAAxB,CAGAP,EAAQ3O,SAAQ,SAAA4O,GACRA,EAAEwC,SAAWxC,EAAEwC,QAAQ5D,SAC3BoB,EAAEa,WAAY,CACjB,IAED,IAAMtL,EAAUgL,EAAMtQ,MAEhB8S,EAAmC,CAAC,EAC1C1D,GAAkBjO,SAAQ,SAAC6F,GACR,MAAX1B,EAAE0B,KACN8L,EAAM9L,GAAQ1B,EAAE0B,GACnB,IAED/G,GAAOG,WAAWkF,EAAEyN,QAAUzN,EAAEjD,QAAcwQ,EAAWC,EAhBd,CAiB9C,IAG6C,IAA1ChD,EAAQjL,QAAO,SAACkL,GAAD,OAAQA,EAAEJ,IAAV,IAAgBnK,OAAW,C,yUAIlDsK,EAAQ3O,SAAQ,SAAA4O,GACRA,EAAEwC,SAAWxC,EAAEwC,QAAQ5D,SAC3BoB,EAAEa,WAAY,CACjB,I,kBAEM3Q,GAAOG,WAAW,wBAAyBF,EAAAA,OAAAA,OAAAA,aAA4B,CAC1EqC,OAAQA,EACRG,OAAQA,EAGRsP,QAASlC,EAAQtH,KAAI,SAACuH,GAAD,OAAOV,GAAkBU,EAAzB,IACrB3N,SAAUc,Q,gDAEjB,KAvPL,GAAsC+J,EAAAA,IChZhC+F,GAAmB,KCSnB/S,GAAS,IAAIC,EAAAA,OAAOC,EAAAA,GAKpB8S,GAAmB,mCAEZC,GAAb,0CAKI,WAAYzS,EAAsB4F,GAAY,sBAC1C,IAAMjE,EAAW,IAAI+Q,GAAe1S,EAAS4F,GACvCxF,EAAauB,EAASvB,WACxBA,EAAW6G,UACXzH,GAAOG,WAAW,+CAAgDF,EAAAA,OAAAA,OAAAA,sBAAqC,CACnGG,UAAW,0CAInB,IAAMG,EAAMK,EAAWL,IAAIqG,QAAQ,SAAU,MAAMA,QAAQ,OAAQ,WATzB,OAU1C,cAAMrG,EAAKC,IAEXG,EAAAA,EAAAA,iBAAe,UAAM,SAAUwB,EAASgR,YACxCxS,EAAAA,EAAAA,iBAAe,UAAM,YAAawB,EAASgR,YAC3CxS,EAAAA,EAAAA,iBAAe,UAAM,gBAAiBwB,EAASoF,eAdL,CAe7C,CApBL,kDAsBI,WACI,OAAQtE,KAAKkQ,YAAcH,EAC9B,KAxBL,GAA6C1S,GA2BhC4S,GAAb,uJAoGI,WACI,OAAQjQ,KAAKkQ,YAAcH,EAC9B,IAtGL,mCAII,SAA4BxS,EAAsB4F,GAC9C,OAAO,IAAI6M,GAAwBzS,EAAS4F,EAC/C,GANL,uBAQI,SAAiBA,GACb,IAAMgN,EAA0E,CAC5EhN,OAAQ4M,GACRG,UAAWH,GACXzL,cAAe,MAGnB,OAAc,MAAVnB,IAEmB,kBAAZA,EACPgN,EAAUD,UAAY/M,EAES,MAAxBA,EAAOmB,eACdvH,GAAOqT,eAA6C,kBAAtBjN,EAAO+M,UACjC,qCAAsC,YAAa/M,EAAO+M,WAC9DnT,GAAOqT,eAAiD,kBAA1BjN,EAAOmB,cACjC,wBAAyB,gBAAiB,cAE9C6L,EAAUD,UAAY/M,EAAO+M,UAC7BC,EAAU7L,cAAgBnB,EAAOmB,eAE1BnB,EAAO+M,YACdC,EAAUD,UAAY/M,EAAO+M,WAGjCC,EAAUhN,OAASgN,EAAUD,WAlBAC,CAqBhC,GApCL,oBAsCI,SAAc5S,EAAkB4F,GAC5B,IAAIU,EAAe,KACnB,OAAOtG,EAAUA,EAAQuG,KAAM,WAC3B,IAAK,YACDD,EAAO,oBACP,MACJ,IAAK,UACDA,EAAO,oBACP,MACJ,IAAK,UACDA,EAAO,oBACP,MACJ,IAAK,QACDA,EAAO,kBACP,MACJ,IAAK,SACDA,EAAO,mBACP,MACJ,IAAK,QACDA,EAAO,4BACP,MACJ,IAAK,WACDA,EAAO,2BACP,MACJ,IAAK,WACDA,EAAO,6BACP,MACJ,IAAK,iBACDA,EAAO,2BACP,MACJ,IAAK,WACDA,EAAO,6BACP,MACJ,IAAK,mBACDA,EAAO,6BACP,MACJ,QACI9G,GAAOG,WAAW,sBAAuBF,EAAAA,OAAAA,OAAAA,iBAAgC,CACrEqT,SAAU,UACVlQ,MAAO5C,IAInB,IAAMI,EAA6B,CAC/BqG,WAAW,EACX1G,IAAM,WAAkBuG,EAAO,OAASV,EAAO+M,UAC/CjM,iBAAkB,SAACC,EAAiB5G,GAIhC,OAHI6F,EAAO+M,YAAcH,KACrB5L,EAAAA,EAAAA,MAEG7D,QAAQC,SAAQ,EAC1B,GAQL,OAL4B,MAAxB4C,EAAOmB,gBACP3G,EAAW4G,KAAO,GAClB5G,EAAW6G,SAAWrB,EAAOmB,eAG1B3G,CACV,KAlGL,GAAoCuF,GCrCvBoN,GAAb,wIAQI,SAAKjR,EAAgBG,GAAkB,WAC7BZ,EAAU,CACZS,OAAQA,EACRG,OAAQA,EACRtB,GAAK8B,KAAKuQ,UACV7P,QAAS,OAGa,MAAtBV,KAAKwQ,gBACLxQ,KAAKwQ,cAAgB,IAGzB,IAAMC,EAAuB,CAAE7R,QAAAA,EAAS2B,QAAS,KAAMC,OAAQ,MAEzDmL,EAAU,IAAIrL,SAAQ,SAACC,EAASC,GAClCiQ,EAAgBlQ,QAAUA,EAC1BkQ,EAAgBjQ,OAASA,CAC5B,IA6DD,OA3DAR,KAAKwQ,cAAchB,KAAKiB,GAEnBzQ,KAAK0Q,0BAEN1Q,KAAK0Q,wBAA0B7E,YAAW,WAItC,IAAM8E,EAAQ,EAAKH,cACnB,EAAKA,cAAgB,KACrB,EAAKE,wBAA0B,KAG/B,IAAM9R,EAAU+R,EAAMrL,KAAI,SAACsL,GAAD,OAAcA,EAAShS,OAAvB,IAQ1B,OANA,EAAKG,KAAK,QAAS,CACfC,OAAQ,eACRJ,SAAS8I,EAAAA,EAAAA,UAAS9I,GAClBM,SAAU,KAGPuI,EAAAA,GAAAA,WAAU,EAAK9J,WAAYc,KAAKgC,UAAU7B,IAAUoC,MAAK,SAACxC,GAC7D,EAAKO,KAAK,QAAS,CACfC,OAAQ,WACRJ,QAASA,EACTK,SAAUT,EACVU,SAAU,IAKdyR,EAAM1S,SAAQ,SAACwS,EAAiBpC,GAC5B,IAAMjQ,EAAUI,EAAO6P,GACvB,GAAIjQ,EAAQtB,MAAO,CACf,IAAMA,EAAQ,IAAID,MAAMuB,EAAQtB,MAAMqC,SAChCrC,EAAOsC,KAAOhB,EAAQtB,MAAMsC,KAC5BtC,EAAOyB,KAAOH,EAAQtB,MAAMyB,KAClCkS,EAAgBjQ,OAAO1D,EAC1B,MACG2T,EAAgBlQ,QAAQnC,EAAQI,OAEvC,GAEJ,IAAE,SAAC1B,GACA,EAAKiC,KAAK,QAAS,CACfC,OAAQ,WACRlC,MAAOA,EACP8B,QAASA,EACTM,SAAU,IAGdyR,EAAM1S,SAAQ,SAACwS,GACXA,EAAgBjQ,OAAO1D,EAC1B,GACJ,GAEJ,GAAE,KAGA6O,CACV,KAvFL,GAA0C/I,EAAAA,GCCpC7F,GAAS,IAAIC,EAAAA,OAAOC,EAAAA,GAKb4T,GAAb,kJAEI,SAAiB1N,GAIb,OAHIA,GAA6B,kBAAZA,GACjBpG,GAAO6G,mBAAmB,iBAAkB,SAAUT,GAEnDA,GARO,kBASjB,GAPL,oBASI,SAAc5F,EAAkB4F,GAC5BpG,GAAO6C,KAAK,qFAEZ,IAAIiE,EAAO,KACX,OAAQtG,EAAQuG,MACZ,IAAK,YACDD,EAAO,uDACP,MACJ,IAAK,UACDA,EAAO,uDACP,MACJ,IAAK,UACDA,EAAO,uDACP,MACJ,IAAK,SACDA,EAAO,sDACP,MACJ,IAAK,QACDA,EAAO,qDACP,MACJ,QACG9G,GAAO6G,mBAAmB,sBAAuB,UAAWG,UAAU,IAG7E,OAAQF,EAAO,WAAaV,CAC/B,KAlCL,GAAuCD,GCNjCnG,GAAS,IAAIC,EAAAA,OAAOC,EAAAA,GAKpB6T,GAAgD,CAClDC,UAAW,2BACXC,QAAS,2BACTC,QAAS,2BACTC,OAAQ,4BAGCC,GAAb,0CAKI,WAAY5T,EAAsB4F,GAI9B,IAJ0C,eAI5B,MAAVA,EAAgB,CAChB,IAAMiO,GAAI/N,EAAAA,EAAAA,WAAS,0CAA+C,aAAxDA,CAAsE9F,GAChF,GAAI6T,EAAG,CACH,IAAMC,EAAgBP,GAAsBM,EAAEtN,MAC1CuN,IACAlO,EAAS,CACLkO,cAAeA,EACfC,cAAc,GAGzB,CAGa,MAAVnO,GACApG,GAAOG,WAAW,sBAAuBF,EAAAA,OAAAA,OAAAA,iBAAgC,CACrEqT,SAAU,UACVlQ,MAAO5C,GAIlB,CAxByC,mBA0BpCA,EAAS4F,EAClB,CAhCL,kDAwHI,WACI,OAAQnD,KAAKqR,gBAAkBP,GAAsB9Q,KAAKzC,QAAQuG,KACrE,IA1HL,wBAkCI,SAAiBX,GAKC,MAAVA,GACApG,GAAO6G,mBAAmB,wDAAyD,SAAUT,GAGjG,IAAMgN,EAA4F,CAC9FkB,cAAe,KACfC,cAAc,EACdC,qBAAsB,MA4B1B,MAxBwB,kBAAZpO,EACRgN,EAAUkB,cAAgBlO,EAEY,MAA/BA,EAAOoO,sBACdxU,GAAOqT,eAAkD,kBAA1BjN,EAAOkO,cAClC,iDAAkD,gBAAiBlO,EAAOkO,eAC9EtU,GAAOqT,eAAyD,kBAAjCjN,EAAOoO,qBAClC,+BAAgC,uBAAwB,cAE5DpB,EAAUkB,cAAgBlO,EAAOkO,cACjClB,EAAUoB,qBAAuBpO,EAAOoO,qBACxCpB,EAAUmB,eAAiBnO,EAAOmO,cAE3BnO,EAAOkO,eACdtU,GAAOqT,eAAkD,kBAA1BjN,EAAOkO,cAClC,wCAAyC,uBAAwBlO,EAAOkO,eAE5ElB,EAAUkB,cAAgBlO,EAAOkO,cACjClB,EAAUmB,eAAiBnO,EAAOmO,cAGlCvU,GAAO6G,mBAAmB,oCAAqC,SAAUT,GAGtEgN,CACV,GA3EL,oBA6EI,SAAc5S,EAAkB4F,GAC5B,IAAIU,EAAe,KACnB,OAAQtG,EAAUA,EAAQuG,KAAO,WAC7B,IAAK,YACDD,EAAO,mCACP,MACJ,IAAK,UACDA,EAAO,mCACP,MACJ,IAAK,UACDA,EAAO,mCACP,MACJ,IAAK,SACDA,EAAO,kCACP,MACJ,QACI9G,GAAOG,WAAW,sBAAuBF,EAAAA,OAAAA,OAAAA,iBAAgC,CACrEqT,SAAU,UACVlQ,MAAO5C,IAInB,IAOMI,EAA6B,CAAEL,IANjC6F,EAAOmO,aACD,WAAH,OAAgBzN,EAAhB,kBAAgCV,EAAOkO,eAEpC,WAAH,OAAgBxN,EAAhB,eAA6BV,EAAOkO,eAM3C1T,QAAqB,CAAC,GAQtB,OALmC,MAA/BwF,EAAOoO,uBACP5T,EAAW4G,KAAO,GAClB5G,EAAW6G,SAAWrB,EAAOoO,sBAG1B5T,CACV,KAtHL,GAAoCuF,G,UCqB9BnG,GAAS,IAAIC,EAAAA,OAAOC,EAAAA,GAK1B,SAASuU,GAAmBjU,EAAsBkU,GAI9C,GAHe,MAAXlU,IAAmBA,EAAU,aAGT,kBAAbA,EAAuB,CAI9B,IAAM6I,EAAQ7I,EAAQ6I,MAAM,kBAC5B,GAAIA,EACA,OAAQA,EAAM,GAAGR,eACb,IAAK,OAAQ,IAAK,QACd,OAAO,IAAIhD,EAAAA,EAAgBrF,GAC/B,IAAK,KAAM,IAAK,MACZ,OAAO,IAAIF,EAAkBE,GACjC,QACIR,GAAO6G,mBAAmB,yBAA0B,UAAWrG,GAG9E,CAED,IAAM6T,GAAIxC,EAAAA,EAAAA,GAAWrR,GAQrB,OAPK6T,GAAMA,EAAEM,kBACT3U,GAAOG,WAAW,yCAA0CF,EAAAA,OAAAA,OAAAA,cAA6B,CACrFG,UAAW,qBACXI,QAASA,IAIV6T,EAAEM,iBAAiB,CACtBzD,iBAAAA,GAEAvK,gBAAAA,EACAW,aAAAA,EACAI,mBAAAA,EACA+B,kBAAAA,GACAyJ,eAAAA,GACArN,gBAAAA,EAAAA,EACAiO,kBAAAA,GACAM,eAAAA,GACAQ,aAAAA,GAAAA,EAEA7B,YAAAA,IACD2B,EACN,C,qCC1FYxU,GAAU,eCkCjBF,GAAS,IAAIC,EAAAA,OAAOC,IC5B1B,IACI,IAAM2U,GAAaC,OAEM,MAArBD,GAAUE,UACVF,GAAUE,QAAUC,EAET,CAAjB,MAAOjV,IAAU,C","sources":["../node_modules/@ethersproject/constants/src.ts/strings.ts","../node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/url-json-rpc-provider.ts","../node_modules/@ethersproject/providers/src.ts/alchemy-provider.ts","../node_modules/@ethersproject/providers/src.ts/ankr-provider.ts","../node_modules/@ethersproject/providers/src.ts/cloudflare-provider.ts","../node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts","../node_modules/@ethersproject/providers/src.ts/fallback-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ipc-provider.ts","../node_modules/@ethersproject/providers/src.ts/infura-provider.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-batch-provider.ts","../node_modules/@ethersproject/providers/src.ts/nodesmith-provider.ts","../node_modules/@ethersproject/providers/src.ts/pocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/index.ts","../node_modules/ethers/src.ts/_version.ts","../node_modules/ethers/src.ts/ethers.ts","../node_modules/ethers/src.ts/index.ts"],"sourcesContent":["// NFKC (composed)             // (decomposed)\nexport const EtherSymbol = \"\\u039e\";  // \"\\uD835\\uDF63\";\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: (...args: Array<any>) => any;\n    onmessage: (...args: Array<any>) => any;\n    onerror: (...args: Array<any>) => any;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n","\n\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { CommunityResourcable } from \"./formatter\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\n\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    async detectNetwork(): Promise<Network> {\n        let network = this.network;\n        if (network == null) {\n            network = await super.detectNetwork();\n\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // If still not set, set it\n            if (this._network == null) {\n                // A static network does not support \"any\"\n                defineReadOnly(this, \"_network\", network);\n\n                this.emit(\"network\", network, null);\n            }\n        }\n        return network;\n    }\n}\n\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\n    readonly apiKey: any;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n\n        // Normalize the Network and API Key\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\n\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\n\n        super(connection, network);\n\n        if (typeof(apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly<any, any>(this, key, apiKey[key]);\n            });\n        }\n    }\n\n    _startPending(): void {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n\n    isCommunityResource(): boolean {\n        return false;\n    }\n\n    getSigner(address?: string): JsonRpcSigner {\n        return logger.throwError(\n            \"API provider does not support signing\",\n            Logger.errors.UNSUPPORTED_OPERATION,\n            { operation: \"getSigner\" }\n        );\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return Promise.resolve([]);\n    }\n\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey: any): any {\n        return apiKey;\n    }\n\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.alchemyapi.io/v2/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arb-rinkeby.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-kovan\":\n                host = \"opt-kovan.g.alchemy.com/v2/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\nimport { Network } from \"@ethersproject/networks\";\n\nimport { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport type { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"homestead\":\n            return \"rpc.ankr.com/eth/\";\n        case \"ropsten\":\n            return \"rpc.ankr.com/eth_ropsten/\";\n        case \"rinkeby\":\n            return \"rpc.ankr.com/eth_rinkeby/\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli/\";\n\n        case \"matic\":\n            return \"rpc.ankr.com/polygon/\";\n\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\n\nexport class AnkrProvider extends UrlJsonRpcProvider {\n    readonly apiKey: string;\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\\/\" + getHost(network.name) + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n}\n","\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n","\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || result.message != \"OK\") {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"ropsten\":\n                return \"https:/\\/api-ropsten.etherscan.io\";\n            case \"rinkeby\":\n                return \"https:/\\/api-rinkeby.etherscan.io\";\n            case \"kovan\":\n                return \"https:/\\/api-kovan.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            case \"optimism\":\n                return \"https:/\\/api-optimistic.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", this.network.name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\"use strict\";\n\nimport { Block, BlockWithTransactions, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\n\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction now() { return (new Date()).getTime(); }\n\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks: Array<Network>): Network {\n    let result = null;\n\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n\n        // Null! We do not know our network; bail.\n        if (network == null) { return null; }\n\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n           }\n        } else {\n            result = network;\n        }\n    }\n\n    return result;\n}\n\nfunction median(values: Array<number>, maxDelta?: number): number {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n\n    return (a + b) / 2;\n}\n\nfunction serialize(value: any): string {\n    if (value === null) {\n        return \"null\";\n    } else if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return JSON.stringify(value);\n    } else if (typeof(value) === \"string\") {\n        return value;\n    } else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    } else if (typeof(value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof(v) === \"function\") {\n                v = \"[function]\";\n            } else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n\n    throw new Error(\"unknown value type: \" + typeof(value));\n}\n\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n\n\nexport interface FallbackProviderConfig {\n    // The Provider\n    provider: Provider;\n\n    // The priority to favour this Provider; lower values are used first (higher priority)\n    priority?: number;\n\n    // Timeout before also triggering the next provider; this does not stop\n    // this provider and if its result comes back before a quorum is reached\n    // it will be incorporated into the vote\n    // - lower values will cause more network traffic but may result in a\n    //   faster result.\n    stallTimeout?: number;\n\n    // How much this provider contributes to the quorum; sometimes a specific\n    // provider may be more reliable or trustworthy than others, but usually\n    // this should be left as the default\n    weight?: number;\n};\n\n// A Staller is used to provide a delay to give a Provider a chance to response\n// before asking the next Provider to try.\ntype Staller = {\n    wait: (func: () => void) => Promise<void>\n    getPromise: () => Promise<void>,\n    cancel: () => void\n};\n\nfunction stall(duration: number): Staller {\n    let cancel: () => void = null;\n\n    let timer: NodeJS.Timer = null;\n    let promise = <Promise<void>>(new Promise((resolve) => {\n        cancel = function() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        }\n        timer = setTimeout(cancel, duration);\n    }));\n\n    const wait = (func: () => void) => {\n        promise = promise.then(func);\n        return promise;\n    }\n\n    function getPromise(): Promise<void> {\n        return promise;\n    }\n\n    return { cancel, getPromise, wait };\n}\n\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\n\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n\n\n// @TODO: Make this an object with staller and cancel built-in\ninterface RunningConfig extends FallbackProviderConfig {\n    start?: number;\n    done?: boolean;\n    cancelled?: boolean;\n    runner?: Promise<any>;\n    staller?: Staller;\n    result?: any;\n    error?: Error;\n};\n\nfunction exposeDebugConfig(config: RunningConfig, now?: number): any {\n    const result: any = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) { result.start = config.start; }\n    if (now) { result.duration = (now - config.start); }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        } else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\n\nfunction normalizedTally(normalize: (value: any) => string, quorum: number): (configs: Array<RunningConfig>) => any {\n    return function(configs: Array<RunningConfig>): any {\n\n        // Count the votes for each result\n        const tally: { [ key: string]: { count: number, result: any } } = { };\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) { tally[value] = { count: 0, result: c.result }; }\n            tally[value].count++;\n        });\n\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n\n        // No quroum\n        return undefined;\n    }\n}\nfunction getProcessFunc(provider: FallbackProvider, method: string, params: { [ key: string ]: any }): (configs: Array<RunningConfig>) => any {\n\n    let normalize = serialize;\n\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function(configs: Array<RunningConfig>): number {\n                const values = configs.map((c) => c.result);\n\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) { return undefined; }\n\n                blockNumber = Math.ceil(blockNumber);\n\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) { blockNumber++; }\n\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n\n                return provider._highestBlockNumber;\n            };\n\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function(configs: Array<RunningConfig>): BigNumber {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            }\n\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function(configs: Array<RunningConfig>): number {\n                return median(configs.map((c) => c.result));\n            }\n\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function(tx: any): string {\n                if (tx == null) { return null; }\n\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            }\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function(block: BlockWithTransactions): string {\n                    if (block == null) { return null; }\n\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            } else {\n                normalize = function(block: Block): string {\n                    if (block == null) { return null; }\n                    return serialize(block);\n                }\n            }\n            break;\n\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n\n}\n\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nasync function waitForSync(config: RunningConfig, blockNumber: number): Promise<BaseProvider> {\n    const provider = <BaseProvider>(config.provider);\n\n    if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n        return provider;\n    }\n\n    return poll(() => {\n        return new Promise((resolve, reject) => {\n            setTimeout(function() {\n\n                // We are synced\n                if (provider.blockNumber >= blockNumber) { return resolve(provider); }\n\n                // We're done; just quit\n                if (config.cancelled) { return resolve(null); }\n\n                // Try again, next block\n                return resolve(undefined);\n            }, 0);\n        });\n    }, { oncePoll: provider });\n}\n\nasync function getRunner(config: RunningConfig, currentBlockNumber: number, method: string, params: { [ key: string]: any }): Promise<any> {\n    let provider = config.provider;\n\n    switch (method) {\n        case \"getBlockNumber\":\n        case \"getGasPrice\":\n            return provider[method]();\n        case \"getEtherPrice\":\n            if ((<any>provider).getEtherPrice) {\n                return (<any>provider).getEtherPrice();\n            }\n            break;\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.address, params.blockTag || \"latest\");\n        case \"getStorageAt\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n        case \"getBlock\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[(params.includeTransactions ? \"getBlockWithTransactions\": \"getBlock\")](params.blockTag || params.blockHash);\n        case \"call\":\n        case \"estimateGas\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.transaction);\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            return provider[method](params.transactionHash);\n        case \"getLogs\": {\n            let filter = params.filter;\n            if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getLogs(filter);\n        }\n    }\n\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n        method: method,\n        params: params\n    });\n}\n\nexport class FallbackProvider extends BaseProvider {\n    readonly providerConfigs: ReadonlyArray<FallbackProviderConfig>;\n    readonly quorum: number;\n\n    // Due to the highly asyncronous nature of the blockchain, we need\n    // to make sure we never unroll the blockNumber due to our random\n    // sample of backends\n    _highestBlockNumber: number;\n\n    constructor(providers: Array<Provider | FallbackProviderConfig>, quorum?: number) {\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n\n        const providerConfigs: Array<FallbackProviderConfig> = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n\n            const config: FallbackProviderConfig = shallowCopy(configOrProvider);\n\n            if (config.priority == null) { config.priority = 1; }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n            }\n            if (config.weight == null) { config.weight = 1; }\n\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${ index }].weight`, weight);\n            }\n\n            return Object.freeze(config);\n        });\n\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n\n        if (quorum == null) {\n            quorum = total / 2;\n        } else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n\n        // Are all providers' networks are known\n        let networkOrReady: Network | Promise<Network> = checkNetworks(providerConfigs.map((c) => (<any>(c.provider)).network));\n\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n\n        this._highestBlockNumber = -1;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        const networks = await Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n        return checkNetworks(networks);\n    }\n\n    async perform(method: string, params: { [name: string]: any }): Promise<any> {\n        // Sending transactions is special; always broadcast it to all backends\n        if (method === \"sendTransaction\") {\n            const results: Array<string | Error> = await Promise.all(this.providerConfigs.map((c) => {\n                return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                    return result.hash;\n                }, (error) => {\n                    return error;\n                });\n            }));\n\n            // Any success is good enough (other errors are likely \"already seen\" errors\n            for (let i = 0; i < results.length; i++) {\n                const result = results[i];\n                if (typeof(result) === \"string\") { return result; }\n            }\n\n            // They were all an error; pick the first error\n            throw results[0];\n        }\n\n        // We need to make sure we are in sync with our backends, so we need\n        // to know this before we can make a lot of calls\n        if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n            await this.getBlockNumber();\n        }\n\n        const processFunc = getProcessFunc(this, method, params);\n\n        // Shuffle the providers and then sort them by their priority; we\n        // shallowCopy them since we will store the result in them too\n        const configs: Array<RunningConfig> = shuffled(this.providerConfigs.map(shallowCopy));\n        configs.sort((a, b) => (a.priority - b.priority));\n\n        const currentBlockNumber = this._highestBlockNumber;\n\n        let i = 0;\n        let first = true;\n        while (true) {\n            const t0 = now();\n\n            // Compute the inflight weight (exclude anything past)\n            let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                                        .reduce((accum, c) => (accum + c.weight), 0);\n\n            // Start running enough to meet quorum\n            while (inflightWeight < this.quorum && i < configs.length) {\n                const config = configs[i++];\n\n                const rid = nextRid++;\n\n                config.start = now();\n                config.staller = stall(config.stallTimeout);\n                config.staller.wait(() => { config.staller = null; });\n\n                config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                    config.done = true;\n                    config.result = result;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                     }\n\n                }, (error) => {\n                    config.done = true;\n                    config.error = error;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                });\n\n                if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                        action: \"request\",\n                        rid: rid,\n                        backend: exposeDebugConfig(config, null),\n                        request: { method: method, params: deepCopy(params) },\n                        provider: this\n                    });\n                }\n\n                inflightWeight += config.weight;\n            }\n\n            // Wait for anything meaningful to finish or stall out\n            const waiting: Array<Promise<any>> = [ ];\n            configs.forEach((c) => {\n                if (c.done || !c.runner) { return; }\n                waiting.push(c.runner);\n                if (c.staller) { waiting.push(c.staller.getPromise()); }\n            });\n\n            if (waiting.length) { await Promise.race(waiting); }\n\n            // Check the quorum and process the results; the process function\n            // may additionally decide the quorum is not met\n            const results = configs.filter((c) => (c.done && c.error == null));\n            if (results.length >= this.quorum) {\n                const result = processFunc(results);\n                if (result !== undefined) {\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) { c.staller.cancel(); }\n                        c.cancelled = true;\n                    });\n                    return result;\n                }\n                if (!first) { await stall(100).getPromise(); }\n                first = false;\n            }\n\n            // No result, check for errors that should be forwarded\n            const errors = configs.reduce((accum, c) => {\n                if (!c.done || c.error == null) { return accum; }\n\n                const code = (<any>(c.error)).code;\n                if (ForwardErrors.indexOf(code) >= 0) {\n                    if (!accum[code]) { accum[code] = { error: c.error, weight: 0 }; }\n                    accum[code].weight += c.weight;\n                }\n\n                return accum;\n            }, <{ [ code: string ]: { error: Error, weight: number } }>({ }));\n\n            Object.keys(errors).forEach((errorCode: string) => {\n                const tally = errors[errorCode];\n                if (tally.weight < this.quorum) { return; }\n\n                // Shut down any stallers\n                configs.forEach(c => {\n                    if (c.staller) { c.staller.cancel(); }\n                    c.cancelled = true;\n                });\n\n                const e = <any>(tally.error);\n\n                const props: { [ name: string ]: any } = { };\n                ForwardProperties.forEach((name) => {\n                    if (e[name] == null) { return; }\n                    props[name] = e[name];\n                });\n\n                logger.throwError(e.reason || e.message, <any>errorCode, props);\n            });\n\n            // All configs have run to completion; we will never get more data\n            if (configs.filter((c) => !c.done).length === 0) { break; }\n        }\n\n        // Shut down any stallers; shouldn't be any\n        configs.forEach(c => {\n            if (c.staller) { c.staller.cancel(); }\n            c.cancelled = true;\n        });\n\n        return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n            method: method,\n            params: params,\n            //results: configs.map((c) => c.result),\n            //errors: configs.map((c) => c.error),\n            results: configs.map((c) => exposeDebugConfig(c)),\n            provider: this\n        });\n    }\n}\n","\"use strict\";\n\nconst IpcProvider: any = null;\n\nexport {\n    IpcProvider\n};\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\n\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n\n        if (apiKey == null) { return apiKeyObj; }\n\n        if (typeof(apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch(network ? network.name: \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-kovan\":\n                host = \"optimism-kovan.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arbitrum-rinkeby.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n","\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    _pendingBatchAggregator: NodeJS.Timer;\n    _pendingBatch: Array<{\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\n        resolve: (result: any) => void,\n        reject: (error: Error) => void\n    }>;\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [ ];\n        }\n\n        const inflightRequest: any = { request, resolve: null, reject: null };\n\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n\n        this._pendingBatch.push(inflightRequest);\n\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            (<any>error).code = payload.error.code;\n                            (<any>error).data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n\n            }, 10);\n        }\n\n        return promise;\n    }\n}\n","/* istanbul ignore file */\n\n\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Special API key provided by Nodesmith for ethers.js\nconst defaultApiKey = \"ETHERS_JS_SHARED\";\n\nexport class NodesmithProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return (host + \"?apiKey=\" + apiKey);\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// These are load-balancer-based application IDs\nconst defaultApplicationIds: Record<string, string> = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n\n        if (apiKey == null) {\n            const n = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n\n        }\n\n        super(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"),\n                \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n        } else {\n            url = `https:/\\/${ host }/v1/${ apiKey.applicationId }`\n        }\n\n        const connection: ConnectionInfo = { url };\n\n        // Initialize empty headers\n        connection.headers = {}\n\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n","\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { AnkrProvider } from \"./ankr-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1].toLowerCase()) {\n                case \"http\": case \"https\":\n                    return new JsonRpcProvider(network);\n                case \"ws\": case \"wss\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        AnkrProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concrete Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    AnkrProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    FallbackProviderConfig,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n","export const version = \"ethers/5.6.9\";\n","\"use strict\";\n\nimport { BaseContract, Contract, ContractFactory } from \"@ethersproject/contracts\";\n\nimport { BigNumber, FixedNumber } from \"@ethersproject/bignumber\";\n\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { Wallet } from \"@ethersproject/wallet\";\n\nimport * as constants from \"@ethersproject/constants\";\n\nimport * as providers from \"@ethersproject/providers\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\n\nimport { Wordlist, wordlists} from \"@ethersproject/wordlists\";\n\nimport * as utils from \"./utils\";\n\nimport { ErrorCode as errors, Logger } from \"@ethersproject/logger\";\n\n////////////////////////\n// Types\n\nimport { BigNumberish } from \"@ethersproject/bignumber\";\nimport { Bytes, BytesLike, Signature } from \"@ethersproject/bytes\";\nimport { Transaction, UnsignedTransaction } from \"@ethersproject/transactions\";\n\n\n////////////////////////\n// Compile-Time Constants\n\n// This is generated by \"npm run dist\"\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\n////////////////////////\n// Types\n\nimport {\n    ContractFunction,\n    ContractReceipt,\n    ContractTransaction,\n\n    Event,\n    EventFilter,\n\n    Overrides,\n    PayableOverrides,\n    CallOverrides,\n\n    PopulatedTransaction,\n\n    ContractInterface\n} from \"@ethersproject/contracts\";\n\n\n////////////////////////\n// Exports\n\nexport {\n    Signer,\n\n    Wallet,\n    VoidSigner,\n\n    getDefaultProvider,\n    providers,\n\n    BaseContract,\n    Contract,\n    ContractFactory,\n\n    BigNumber,\n    FixedNumber,\n\n    constants,\n    errors,\n\n    logger,\n\n    utils,\n\n    wordlists,\n\n\n    ////////////////////////\n    // Compile-Time Constants\n\n    version,\n\n\n    ////////////////////////\n    // Types\n\n    ContractFunction,\n    ContractReceipt,\n    ContractTransaction,\n    Event,\n    EventFilter,\n\n    Overrides,\n    PayableOverrides,\n    CallOverrides,\n\n    PopulatedTransaction,\n\n    ContractInterface,\n\n    BigNumberish,\n\n    Bytes,\n    BytesLike,\n\n    Signature,\n\n    Transaction,\n    UnsignedTransaction,\n\n    Wordlist\n};\n\n","\"use strict\";\n\n// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js\n\nimport * as ethers from \"./ethers\";\n\ntry {\n    const anyGlobal = (window as any);\n\n    if (anyGlobal._ethers == null) {\n        anyGlobal._ethers = ethers;\n    }\n} catch (error) { }\n\nexport { ethers };\n\nexport {\n    Signer,\n\n    Wallet,\n    VoidSigner,\n\n    getDefaultProvider,\n    providers,\n\n    BaseContract,\n    Contract,\n    ContractFactory,\n\n    BigNumber,\n    FixedNumber,\n\n    constants,\n    errors,\n\n    logger,\n\n    utils,\n\n    wordlists,\n\n\n    ////////////////////////\n    // Compile-Time Constants\n\n    version,\n\n\n    ////////////////////////\n    // Types\n\n    ContractFunction,\n    ContractReceipt,\n    ContractTransaction,\n    Event,\n    EventFilter,\n\n    Overrides,\n    PayableOverrides,\n    CallOverrides,\n\n    PopulatedTransaction,\n\n    ContractInterface,\n\n    BigNumberish,\n\n    Bytes,\n    BytesLike,\n\n    Signature,\n\n    Transaction,\n    UnsignedTransaction,\n\n    Wordlist\n} from \"./ethers\";\n"],"names":["EtherSymbol","WS","WebSocket","Error","error","logger","Logger","version","throwError","operation","NextId","WebSocketProvider","url","network","_pollingInterval","_wsReady","defineReadOnly","connection","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","result","JSON","parse","String","request","undefined","callback","emit","action","response","provider","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","this","_websocket","_detectNetwork","value","blockNumber","rid","Promise","resolve","reject","stringify","jsonrpc","tag","param","subIdPromise","_subIds","all","then","subId","event","type","_subscribe","BigNumber","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","length","listenerCount","readyState","CONNECTING","onerror","close","JsonRpcProvider","StaticJsonRpcProvider","_super","detectNetwork","call","_network","UrlJsonRpcProvider","apiKey","checkAbstract","getStatic","key","address","defaultApiKey","AlchemyWebSocketProvider","AlchemyProvider","replace","throwArgumentError","host","name","arguments","allowGzip","throttleCallback","attempt","showThrottleMessage","getHost","AnkrProvider","projectSecret","user","password","CloudflareProvider","perform","blockTag","getTransactionPostData","transaction","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","nonce","hexValue","hexlify","accessListify","map","set","storageKeys","join","getResult","status","toLowerCase","indexOf","throttleRetry","getJsonResult","checkLogTag","parseInt","substring","checkError","match","isHexString","body","responseText","EtherscanProvider","getBaseUrl","module","query","reduce","accum","baseUrl","apikey","post","getPostUrl","getUrl","getPostData","procFunc","throttleSlotInterval","isCommunityResource","payloadStr","headers","fetchJson","deepCopy","fetch","position","hex","signedTransaction","catch","boolean","includeTransactions","txhash","transactionHash","postData","args","fromBlock","toBlock","topics","topic0","logs","blocks","i","blockHash","getBlock","parseFloat","ethusd","addressOrName","startBlock","endBlock","resolveName","startblock","endblock","sort","tx","creates","contractAddress","item","transactionResponse","timeStamp","timestamp","BaseProvider","now","Date","getTime","checkNetworks","networks","chainId","ensAddress","median","values","maxDelta","slice","middle","Math","floor","a","b","abs","serialize","toString","Array","isArray","v","nextRid","stall","duration","cancel","timer","promise","clearTimeout","setTimeout","getPromise","wait","func","ForwardErrors","ForwardProperties","exposeDebugConfig","config","weight","defineProperty","get","start","done","getProcessFunc","normalize","configs","c","ceil","_highestBlockNumber","shallowCopy","confirmations","transactions","quorum","tally","count","check","normalizedTally","waitForSync","poll","cancelled","oncePoll","getRunner","currentBlockNumber","getEtherPrice","getStorageAt","getLogs","FallbackProvider","providers","providerConfigs","configOrProvider","index","Provider","stallTimeout","freeze","priority","total","networkOrReady","getNetwork","sendTransaction","results","getBlockNumber","shuffled","first","t0","inflightWeight","runner","staller","backend","waiting","push","race","errors","errorCode","props","reason","IpcProvider","defaultProjectId","InfuraWebSocketProvider","InfuraProvider","projectId","apiKeyObj","assertArgument","argument","JsonRpcBatchProvider","_nextId","_pendingBatch","inflightRequest","_pendingBatchAggregator","batch","inflight","NodesmithProvider","defaultApplicationIds","homestead","ropsten","rinkeby","goerli","PocketProvider","n","applicationId","loadBalancer","applicationSecretKey","getDefaultProvider","options","_defaultProvider","Web3Provider","anyGlobal","window","_ethers","ethers"],"sourceRoot":""}