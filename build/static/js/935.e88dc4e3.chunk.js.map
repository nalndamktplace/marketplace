{"version":3,"file":"static/js/935.e88dc4e3.chunk.js","mappings":"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","sources":["connections/contracts.js"],"sourcesContent":["import GaTracker from '../trackers/ga-tracker'\n\nimport { NALNDA_TOKEN_CONTRACT_ADDRESS, MARKET_CONTRACT_ADDRESS } from '../config/contracts'\n\nconst { ethers } = require('ethers')\n\nconst marketplace = require('../artifacts/contracts/NalndaMarketplace.sol/NalndaMarketplace.json')\nconst nalndaToken = require('../artifacts/contracts/mocks/NALNDA.sol/Nalnda.json')\nconst book = require('../artifacts/contracts/NalndaBook.sol/NalndaBook.json')\n\nconst getBooksCount = async function getBooksCount() {\n\tGaTracker('event_contracts_get_books_count')\n\tconst provider = new ethers.providers.Web3Provider(window.ethereum)\n\tlet marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, provider)\n\tconst books = await marketplaceContract.totalBooksCreated()\n\treturn books.toString()\n}\n\nconst getBooks = async function getBooks(index) {\n\tGaTracker('event_contracts_get_books')\n\tconst provider = new ethers.providers.Web3Provider(window.ethereum)\n\tlet marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, provider)\n\tconst books = await marketplaceContract.bookAddresses(index)\n\treturn books\n}\n\nconst listNftForSales = async function listNftForSales(authorAddress, coverUrl, price, daysForSecondarySale, language, genres, signer) {\n\tGaTracker('event_contracts_list_nft')\n\tlet marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tlet transaction = await marketplaceContract.createNewBook(authorAddress, coverUrl, ethers.utils.parseEther(price), daysForSecondarySale, language, genres)\n\tlet tx = await transaction.wait()\n\treturn tx\n}\n\nconst purchaseNft = async function purchaseNft(buyer, bookAddress, amount, signer) {\n\tGaTracker('event_contracts_purchase_nft')\n\tconst nalndaTokenContract = new ethers.Contract(NALNDA_TOKEN_CONTRACT_ADDRESS, nalndaToken.abi, signer)\n\ttry {\n\t\tconst approval = await nalndaTokenContract.approve(bookAddress, ethers.utils.parseEther(amount))\n\t\tawait approval.wait()\n\t\tconst bookContract = new ethers.Contract(bookAddress, book.abi, signer)\n\t\tconst transaction = await bookContract.safeMint(buyer)\n\t\tconst tx = await transaction.wait()\n\t\treturn tx\n\t} catch (err) {\n\t\t// console.log(err)\n\t}\n}\n\nconst getBookUri = async function getBookUri(bookAddress, signer) {\n\tGaTracker('event_contracts_get_book_uri')\n\tconst bookContract = new ethers.Contract(bookAddress, book.abi, signer)\n\tconst uri = await bookContract.uri()\n\treturn uri\n}\n\nconst listBookToMarketplace = async function listBookToMarketplace(bookAddress, bookTokenId, bookPrice, signer) {\n\tGaTracker('event_contracts_list_book')\n\tconst marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tconst listing = await marketplaceContract.listCover(bookAddress, bookTokenId, ethers.utils.parseEther(bookPrice))\n\treturn await listing.wait()\n}\n\nconst unlistBookFromMarketplace = async function unlistBookFromMarketplace(bookOrderId, signer) {\n\tGaTracker('event_contracts_unlist_book')\n\tconst marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tconst unlisting = await marketplaceContract.unlistCover(bookOrderId)\n\treturn await unlisting.wait()\n}\n\nconst buyListedCover = async function buyListedCover(bookOrderId, bookPrice, signer) {\n\tGaTracker('event_contracts_buy_cover')\n\tconst nalndaTokenContract = new ethers.Contract(NALNDA_TOKEN_CONTRACT_ADDRESS, nalndaToken.abi, signer)\n\tconst approval = await nalndaTokenContract.approve(MARKET_CONTRACT_ADDRESS, ethers.utils.parseEther(bookPrice.toString()))\n\tawait approval.wait()\n\tconst marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tconst transaction = await marketplaceContract.buyCover(bookOrderId)\n\tconst tx = await transaction.wait()\n\treturn tx\n}\n\nconst createNewItoBook = async function createNewBook(authorAddress, idos, coverUrl, price, daysForSecondarySale, language, genres, signer) {\n\tGaTracker('event_contracts_create_ito')\n}\n\nconst Contracts = {\n\tnalndaToken,\n\tmarketplace,\n\tbook,\n\tgetBooksCount,\n\tgetBooks,\n\tlistNftForSales,\n\tpurchaseNft,\n\tgetBookUri,\n\tlistBookToMarketplace,\n\tunlistBookFromMarketplace,\n\tbuyListedCover,\n\tcreateNewItoBook,\n}\n\nexport default Contracts\n"],"names":["ethers","require","marketplace","nalndaToken","book","getBooksCount","async","GaTracker","provider","providers","Web3Provider","window","ethereum","marketplaceContract","Contract","MARKET_CONTRACT_ADDRESS","abi","totalBooksCreated","toString","getBooks","index","bookAddresses","listNftForSales","authorAddress","coverUrl","price","daysForSecondarySale","language","genres","signer","transaction","createNewBook","utils","parseEther","wait","purchaseNft","buyer","bookAddress","amount","nalndaTokenContract","NALNDA_TOKEN_CONTRACT_ADDRESS","approval","approve","bookContract","safeMint","err","getBookUri","uri","listBookToMarketplace","bookTokenId","bookPrice","listing","listCover","unlistBookFromMarketplace","bookOrderId","unlisting","unlistCover","buyListedCover","buyCover","createNewItoBook","idos"],"sourceRoot":""}