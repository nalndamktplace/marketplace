{"version":3,"file":"static/js/935.e01bdaa3.chunk.js","mappings":"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","sources":["config/contracts.js","connections/contracts.js"],"sourcesContent":["export const NALNDA_TOKEN_CONTRACT_ADDRESS = '0xdA5289fCAAF71d52a80A254da614a192b693e977'\nexport const MARKET_CONTRACT_ADDRESS = '0xCcCABe37d0bDec98628860C69895092340de07B0'\nexport const DISCOUNT_CONTRACT_ADDRESS = '0x31D697De10E73f842821B2191b448A6f940A8feB'\n","import GaTracker from '../trackers/ga-tracker'\n\nimport { NALNDA_TOKEN_CONTRACT_ADDRESS, MARKET_CONTRACT_ADDRESS } from '../config/contracts'\n\nconst { ethers } = require('ethers')\n\nconst marketplace = require('../artifacts/contracts/NalndaMarketplace.sol/NalndaMarketplace.json')\nconst nalndaToken = require('../artifacts/contracts/mocks/NALNDA.sol/Nalnda.json')\nconst book = require('../artifacts/contracts/NalndaBook.sol/NalndaBook.json')\n\nconst getBooksCount = async function getBooksCount() {\n\tGaTracker('event_contracts_get_books_count')\n\tconst provider = new ethers.providers.Web3Provider(window.ethereum)\n\tlet marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, provider)\n\tconst books = await marketplaceContract.totalBooksCreated()\n\treturn books.toString()\n}\n\nconst getBooks = async function getBooks(index) {\n\tGaTracker('event_contracts_get_books')\n\tconst provider = new ethers.providers.Web3Provider(window.ethereum)\n\tlet marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, provider)\n\tconst books = await marketplaceContract.bookAddresses(index)\n\treturn books\n}\n\nconst listNftForSales = async function listNftForSales(authorAddress, coverUrl, price, daysForSecondarySale, language, genres, signer) {\n\tGaTracker('event_contracts_list_nft')\n\tlet marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tlet transaction = await marketplaceContract.createNewBook(authorAddress, coverUrl, ethers.utils.parseEther(price), daysForSecondarySale, language, genres)\n\tlet tx = await transaction.wait()\n\treturn tx\n}\n\nconst purchaseNft = async function purchaseNft(buyer, bookAddress, amount, signer) {\n\tGaTracker('event_contracts_purchase_nft')\n\tconst nalndaTokenContract = new ethers.Contract(NALNDA_TOKEN_CONTRACT_ADDRESS, nalndaToken.abi, signer)\n\ttry {\n\t\tconst approval = await nalndaTokenContract.approve(bookAddress, ethers.utils.parseEther(amount))\n\t\tawait approval.wait()\n\t\tconst bookContract = new ethers.Contract(bookAddress, book.abi, signer)\n\t\tconst transaction = await bookContract.safeMint(buyer)\n\t\tconst tx = await transaction.wait()\n\t\treturn tx\n\t} catch (err) {\n\t\tconsole.log(err)\n\t}\n}\n\nconst getBookUri = async function getBookUri(bookAddress, signer) {\n\tGaTracker('event_contracts_get_book_uri')\n\tconst bookContract = new ethers.Contract(bookAddress, book.abi, signer)\n\tconst uri = await bookContract.uri()\n\treturn uri\n}\n\nconst listBookToMarketplace = async function listBookToMarketplace(bookAddress, bookTokenId, bookPrice, signer) {\n\tGaTracker('event_contracts_list_book')\n\tconst marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tconst listing = await marketplaceContract.listCover(bookAddress, bookTokenId, ethers.utils.parseEther(bookPrice))\n\treturn await listing.wait()\n}\n\nconst unlistBookFromMarketplace = async function unlistBookFromMarketplace(bookOrderId, signer) {\n\tGaTracker('event_contracts_unlist_book')\n\tconst marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tconst unlisting = await marketplaceContract.unlistCover(bookOrderId)\n\treturn await unlisting.wait()\n}\n\nconst buyListedCover = async function buyListedCover(bookOrderId, bookPrice, signer) {\n\tGaTracker('event_contracts_buy_cover')\n\tconst nalndaTokenContract = new ethers.Contract(NALNDA_TOKEN_CONTRACT_ADDRESS, nalndaToken.abi, signer)\n\tconst approval = await nalndaTokenContract.approve(MARKET_CONTRACT_ADDRESS, ethers.utils.parseEther(bookPrice.toString()))\n\tawait approval.wait()\n\tconst marketplaceContract = new ethers.Contract(MARKET_CONTRACT_ADDRESS, marketplace.abi, signer)\n\tconst transaction = await marketplaceContract.buyCover(bookOrderId)\n\tconst tx = await transaction.wait()\n\treturn tx\n}\n\nconst createNewItoBook = async function createNewBook(authorAddress, idos, coverUrl, price, daysForSecondarySale, language, genres, signer) {\n\tGaTracker('event_contracts_create_ito')\n}\n\nconst Contracts = {\n\tnalndaToken,\n\tmarketplace,\n\tbook,\n\tgetBooksCount,\n\tgetBooks,\n\tlistNftForSales,\n\tpurchaseNft,\n\tgetBookUri,\n\tlistBookToMarketplace,\n\tunlistBookFromMarketplace,\n\tbuyListedCover,\n\tcreateNewItoBook,\n}\n\nexport default Contracts\n"],"names":["NALNDA_TOKEN_CONTRACT_ADDRESS","MARKET_CONTRACT_ADDRESS","ethers","require","marketplace","nalndaToken","book","getBooksCount","async","GaTracker","provider","providers","Web3Provider","window","ethereum","marketplaceContract","Contract","abi","totalBooksCreated","toString","getBooks","index","bookAddresses","listNftForSales","authorAddress","coverUrl","price","daysForSecondarySale","language","genres","signer","transaction","createNewBook","utils","parseEther","wait","purchaseNft","buyer","bookAddress","amount","nalndaTokenContract","approval","approve","bookContract","safeMint","err","console","log","getBookUri","uri","listBookToMarketplace","bookTokenId","bookPrice","listing","listCover","unlistBookFromMarketplace","bookOrderId","unlisting","unlistCover","buyListedCover","buyCover","createNewItoBook","idos"],"sourceRoot":""}